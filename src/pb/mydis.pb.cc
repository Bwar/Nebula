// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: mydis.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "mydis.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace neb {

namespace {

const ::google::protobuf::Descriptor* Mydis_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Mydis_reflection_ = NULL;
const ::google::protobuf::Descriptor* Mydis_RedisOperate_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Mydis_RedisOperate_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* Mydis_RedisOperate_OPERATE_TYPE_descriptor_ = NULL;
const ::google::protobuf::Descriptor* Mydis_DbOperate_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Mydis_DbOperate_reflection_ = NULL;
const ::google::protobuf::Descriptor* Mydis_DbOperate_Condition_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Mydis_DbOperate_Condition_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* Mydis_DbOperate_Condition_E_RELATION_descriptor_ = NULL;
const ::google::protobuf::Descriptor* Mydis_DbOperate_ConditionGroup_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Mydis_DbOperate_ConditionGroup_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* Mydis_DbOperate_ConditionGroup_E_RELATION_descriptor_ = NULL;
const ::google::protobuf::Descriptor* Mydis_DbOperate_OrderBy_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Mydis_DbOperate_OrderBy_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* Mydis_DbOperate_OrderBy_E_RELATION_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* Mydis_DbOperate_E_QUERY_TYPE_descriptor_ = NULL;
const ::google::protobuf::Descriptor* Record_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Record_reflection_ = NULL;
const ::google::protobuf::Descriptor* Field_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Field_reflection_ = NULL;
const ::google::protobuf::Descriptor* Result_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Result_reflection_ = NULL;
const ::google::protobuf::Descriptor* Result_DataLocate_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Result_DataLocate_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* Result_E_RESULT_FROM_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* E_COL_TYPE_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_mydis_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_mydis_2eproto() {
  protobuf_AddDesc_mydis_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "mydis.proto");
  GOOGLE_CHECK(file != NULL);
  Mydis_descriptor_ = file->message_type(0);
  static const int Mydis_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Mydis, section_factor_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Mydis, redis_operate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Mydis, db_operate_),
  };
  Mydis_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Mydis_descriptor_,
      Mydis::default_instance_,
      Mydis_offsets_,
      -1,
      -1,
      -1,
      sizeof(Mydis),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Mydis, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Mydis, _is_default_instance_));
  Mydis_RedisOperate_descriptor_ = Mydis_descriptor_->nested_type(0);
  static const int Mydis_RedisOperate_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Mydis_RedisOperate, key_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Mydis_RedisOperate, redis_cmd_read_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Mydis_RedisOperate, redis_cmd_write_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Mydis_RedisOperate, op_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Mydis_RedisOperate, fields_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Mydis_RedisOperate, key_ttl_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Mydis_RedisOperate, redis_structure_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Mydis_RedisOperate, data_purpose_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Mydis_RedisOperate, hash_key_),
  };
  Mydis_RedisOperate_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Mydis_RedisOperate_descriptor_,
      Mydis_RedisOperate::default_instance_,
      Mydis_RedisOperate_offsets_,
      -1,
      -1,
      -1,
      sizeof(Mydis_RedisOperate),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Mydis_RedisOperate, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Mydis_RedisOperate, _is_default_instance_));
  Mydis_RedisOperate_OPERATE_TYPE_descriptor_ = Mydis_RedisOperate_descriptor_->enum_type(0);
  Mydis_DbOperate_descriptor_ = Mydis_descriptor_->nested_type(1);
  static const int Mydis_DbOperate_offsets_[10] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Mydis_DbOperate, query_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Mydis_DbOperate, table_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Mydis_DbOperate, fields_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Mydis_DbOperate, conditions_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Mydis_DbOperate, groupby_col_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Mydis_DbOperate, orderby_col_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Mydis_DbOperate, group_relation_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Mydis_DbOperate, limit_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Mydis_DbOperate, limit_from_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Mydis_DbOperate, mod_factor_),
  };
  Mydis_DbOperate_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Mydis_DbOperate_descriptor_,
      Mydis_DbOperate::default_instance_,
      Mydis_DbOperate_offsets_,
      -1,
      -1,
      -1,
      sizeof(Mydis_DbOperate),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Mydis_DbOperate, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Mydis_DbOperate, _is_default_instance_));
  Mydis_DbOperate_Condition_descriptor_ = Mydis_DbOperate_descriptor_->nested_type(0);
  static const int Mydis_DbOperate_Condition_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Mydis_DbOperate_Condition, relation_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Mydis_DbOperate_Condition, col_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Mydis_DbOperate_Condition, col_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Mydis_DbOperate_Condition, col_values_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Mydis_DbOperate_Condition, col_name_right_),
  };
  Mydis_DbOperate_Condition_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Mydis_DbOperate_Condition_descriptor_,
      Mydis_DbOperate_Condition::default_instance_,
      Mydis_DbOperate_Condition_offsets_,
      -1,
      -1,
      -1,
      sizeof(Mydis_DbOperate_Condition),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Mydis_DbOperate_Condition, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Mydis_DbOperate_Condition, _is_default_instance_));
  Mydis_DbOperate_Condition_E_RELATION_descriptor_ = Mydis_DbOperate_Condition_descriptor_->enum_type(0);
  Mydis_DbOperate_ConditionGroup_descriptor_ = Mydis_DbOperate_descriptor_->nested_type(1);
  static const int Mydis_DbOperate_ConditionGroup_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Mydis_DbOperate_ConditionGroup, relation_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Mydis_DbOperate_ConditionGroup, condition_),
  };
  Mydis_DbOperate_ConditionGroup_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Mydis_DbOperate_ConditionGroup_descriptor_,
      Mydis_DbOperate_ConditionGroup::default_instance_,
      Mydis_DbOperate_ConditionGroup_offsets_,
      -1,
      -1,
      -1,
      sizeof(Mydis_DbOperate_ConditionGroup),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Mydis_DbOperate_ConditionGroup, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Mydis_DbOperate_ConditionGroup, _is_default_instance_));
  Mydis_DbOperate_ConditionGroup_E_RELATION_descriptor_ = Mydis_DbOperate_ConditionGroup_descriptor_->enum_type(0);
  Mydis_DbOperate_OrderBy_descriptor_ = Mydis_DbOperate_descriptor_->nested_type(2);
  static const int Mydis_DbOperate_OrderBy_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Mydis_DbOperate_OrderBy, relation_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Mydis_DbOperate_OrderBy, col_name_),
  };
  Mydis_DbOperate_OrderBy_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Mydis_DbOperate_OrderBy_descriptor_,
      Mydis_DbOperate_OrderBy::default_instance_,
      Mydis_DbOperate_OrderBy_offsets_,
      -1,
      -1,
      -1,
      sizeof(Mydis_DbOperate_OrderBy),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Mydis_DbOperate_OrderBy, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Mydis_DbOperate_OrderBy, _is_default_instance_));
  Mydis_DbOperate_OrderBy_E_RELATION_descriptor_ = Mydis_DbOperate_OrderBy_descriptor_->enum_type(0);
  Mydis_DbOperate_E_QUERY_TYPE_descriptor_ = Mydis_DbOperate_descriptor_->enum_type(0);
  Record_descriptor_ = file->message_type(1);
  static const int Record_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Record, field_info_),
  };
  Record_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Record_descriptor_,
      Record::default_instance_,
      Record_offsets_,
      -1,
      -1,
      -1,
      sizeof(Record),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Record, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Record, _is_default_instance_));
  Field_descriptor_ = file->message_type(2);
  static const int Field_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Field, col_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Field, col_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Field, col_value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Field, col_as_),
  };
  Field_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Field_descriptor_,
      Field::default_instance_,
      Field_offsets_,
      -1,
      -1,
      -1,
      sizeof(Field),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Field, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Field, _is_default_instance_));
  Result_descriptor_ = file->message_type(3);
  static const int Result_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Result, err_no_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Result, err_msg_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Result, total_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Result, current_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Result, record_data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Result, from_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Result, locate_),
  };
  Result_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Result_descriptor_,
      Result::default_instance_,
      Result_offsets_,
      -1,
      -1,
      -1,
      sizeof(Result),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Result, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Result, _is_default_instance_));
  Result_DataLocate_descriptor_ = Result_descriptor_->nested_type(0);
  static const int Result_DataLocate_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Result_DataLocate, section_from_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Result_DataLocate, section_to_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Result_DataLocate, hash_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Result_DataLocate, divisor_),
  };
  Result_DataLocate_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Result_DataLocate_descriptor_,
      Result_DataLocate::default_instance_,
      Result_DataLocate_offsets_,
      -1,
      -1,
      -1,
      sizeof(Result_DataLocate),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Result_DataLocate, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Result_DataLocate, _is_default_instance_));
  Result_E_RESULT_FROM_descriptor_ = Result_descriptor_->enum_type(0);
  E_COL_TYPE_descriptor_ = file->enum_type(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_mydis_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Mydis_descriptor_, &Mydis::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Mydis_RedisOperate_descriptor_, &Mydis_RedisOperate::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Mydis_DbOperate_descriptor_, &Mydis_DbOperate::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Mydis_DbOperate_Condition_descriptor_, &Mydis_DbOperate_Condition::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Mydis_DbOperate_ConditionGroup_descriptor_, &Mydis_DbOperate_ConditionGroup::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Mydis_DbOperate_OrderBy_descriptor_, &Mydis_DbOperate_OrderBy::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Record_descriptor_, &Record::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Field_descriptor_, &Field::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Result_descriptor_, &Result::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Result_DataLocate_descriptor_, &Result_DataLocate::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_mydis_2eproto() {
  delete Mydis::default_instance_;
  delete Mydis_reflection_;
  delete Mydis_RedisOperate::default_instance_;
  delete Mydis_RedisOperate_reflection_;
  delete Mydis_DbOperate::default_instance_;
  delete Mydis_DbOperate_reflection_;
  delete Mydis_DbOperate_Condition::default_instance_;
  delete Mydis_DbOperate_Condition_reflection_;
  delete Mydis_DbOperate_ConditionGroup::default_instance_;
  delete Mydis_DbOperate_ConditionGroup_reflection_;
  delete Mydis_DbOperate_OrderBy::default_instance_;
  delete Mydis_DbOperate_OrderBy_reflection_;
  delete Record::default_instance_;
  delete Record_reflection_;
  delete Field::default_instance_;
  delete Field_reflection_;
  delete Result::default_instance_;
  delete Result_reflection_;
  delete Result_DataLocate::default_instance_;
  delete Result_DataLocate_reflection_;
}

void protobuf_AddDesc_mydis_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AddDesc_mydis_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\013mydis.proto\022\003neb\"\214\013\n\005Mydis\022\026\n\016section_"
    "factor\030\001 \001(\r\022.\n\rredis_operate\030\002 \001(\0132\027.ne"
    "b.Mydis.RedisOperate\022(\n\ndb_operate\030\003 \001(\013"
    "2\024.neb.Mydis.DbOperate\032\237\002\n\014RedisOperate\022"
    "\020\n\010key_name\030\001 \001(\014\022\026\n\016redis_cmd_read\030\002 \001("
    "\t\022\027\n\017redis_cmd_write\030\003 \001(\t\0225\n\007op_type\030\004 "
    "\001(\0162$.neb.Mydis.RedisOperate.OPERATE_TYP"
    "E\022\032\n\006fields\030\005 \003(\0132\n.neb.Field\022\017\n\007key_ttl"
    "\030\006 \001(\005\022\027\n\017redis_structure\030\007 \001(\005\022\024\n\014data_"
    "purpose\030\010 \001(\005\022\020\n\010hash_key\030\t \001(\014\"\'\n\014OPERA"
    "TE_TYPE\022\n\n\006T_READ\020\000\022\013\n\007T_WRITE\020\001\032\356\007\n\tDbO"
    "perate\0225\n\nquery_type\030\001 \001(\0162!.neb.Mydis.D"
    "bOperate.E_QUERY_TYPE\022\022\n\ntable_name\030\002 \001("
    "\t\022\032\n\006fields\030\003 \003(\0132\n.neb.Field\0227\n\nconditi"
    "ons\030\004 \003(\0132#.neb.Mydis.DbOperate.Conditio"
    "nGroup\022\023\n\013groupby_col\030\005 \003(\t\0221\n\013orderby_c"
    "ol\030\006 \003(\0132\034.neb.Mydis.DbOperate.OrderBy\022F"
    "\n\016group_relation\030\007 \001(\0162..neb.Mydis.DbOpe"
    "rate.ConditionGroup.E_RELATION\022\r\n\005limit\030"
    "\010 \001(\r\022\022\n\nlimit_from\030\t \001(\r\022\022\n\nmod_factor\030"
    "\n \001(\r\032\371\001\n\tCondition\022;\n\010relation\030\001 \001(\0162)."
    "neb.Mydis.DbOperate.Condition.E_RELATION"
    "\022!\n\010col_type\030\002 \001(\0162\017.neb.E_COL_TYPE\022\020\n\010c"
    "ol_name\030\003 \001(\t\022\022\n\ncol_values\030\004 \003(\014\022\026\n\016col"
    "_name_right\030\005 \001(\t\"N\n\nE_RELATION\022\006\n\002EQ\020\000\022"
    "\006\n\002NE\020\001\022\006\n\002GT\020\002\022\006\n\002LT\020\003\022\006\n\002GE\020\004\022\006\n\002LE\020\005\022"
    "\010\n\004LIKE\020\006\022\006\n\002IN\020\007\032\244\001\n\016ConditionGroup\022@\n\010"
    "relation\030\001 \001(\0162..neb.Mydis.DbOperate.Con"
    "ditionGroup.E_RELATION\0221\n\tcondition\030\002 \003("
    "\0132\036.neb.Mydis.DbOperate.Condition\"\035\n\nE_R"
    "ELATION\022\007\n\003AND\020\000\022\006\n\002OR\020\001\032w\n\007OrderBy\0229\n\010r"
    "elation\030\001 \001(\0162\'.neb.Mydis.DbOperate.Orde"
    "rBy.E_RELATION\022\020\n\010col_name\030\002 \001(\t\"\037\n\nE_RE"
    "LATION\022\007\n\003ASC\020\000\022\010\n\004DESC\020\001\"^\n\014E_QUERY_TYP"
    "E\022\n\n\006SELECT\020\000\022\n\n\006INSERT\020\001\022\021\n\rINSERT_IGNO"
    "RE\020\002\022\n\n\006UPDATE\020\003\022\013\n\007REPLACE\020\004\022\n\n\006DELETE\020"
    "\005\"(\n\006Record\022\036\n\nfield_info\030\001 \003(\0132\n.neb.Fi"
    "eld\"_\n\005Field\022\020\n\010col_name\030\001 \001(\t\022!\n\010col_ty"
    "pe\030\002 \001(\0162\017.neb.E_COL_TYPE\022\021\n\tcol_value\030\003"
    " \001(\014\022\016\n\006col_as\030\004 \001(\t\"\262\002\n\006Result\022\016\n\006err_n"
    "o\030\001 \001(\005\022\017\n\007err_msg\030\002 \001(\014\022\023\n\013total_count\030"
    "\003 \001(\005\022\025\n\rcurrent_count\030\004 \001(\005\022 \n\013record_d"
    "ata\030\005 \003(\0132\013.neb.Record\022\014\n\004from\030\006 \001(\005\022&\n\006"
    "locate\030\007 \001(\0132\026.neb.Result.DataLocate\032U\n\n"
    "DataLocate\022\024\n\014section_from\030\001 \001(\r\022\022\n\nsect"
    "ion_to\030\002 \001(\r\022\014\n\004hash\030\003 \001(\r\022\017\n\007divisor\030\004 "
    "\001(\r\",\n\rE_RESULT_FROM\022\013\n\007FROM_DB\020\000\022\016\n\nFRO"
    "M_REDIS\020\001*D\n\nE_COL_TYPE\022\n\n\006STRING\020\000\022\007\n\003I"
    "NT\020\001\022\n\n\006BIGINT\020\002\022\t\n\005FLOAT\020\003\022\n\n\006DOUBLE\020\004b"
    "\006proto3", 1967);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "mydis.proto", &protobuf_RegisterTypes);
  Mydis::default_instance_ = new Mydis();
  Mydis_RedisOperate::default_instance_ = new Mydis_RedisOperate();
  Mydis_DbOperate::default_instance_ = new Mydis_DbOperate();
  Mydis_DbOperate_Condition::default_instance_ = new Mydis_DbOperate_Condition();
  Mydis_DbOperate_ConditionGroup::default_instance_ = new Mydis_DbOperate_ConditionGroup();
  Mydis_DbOperate_OrderBy::default_instance_ = new Mydis_DbOperate_OrderBy();
  Record::default_instance_ = new Record();
  Field::default_instance_ = new Field();
  Result::default_instance_ = new Result();
  Result_DataLocate::default_instance_ = new Result_DataLocate();
  Mydis::default_instance_->InitAsDefaultInstance();
  Mydis_RedisOperate::default_instance_->InitAsDefaultInstance();
  Mydis_DbOperate::default_instance_->InitAsDefaultInstance();
  Mydis_DbOperate_Condition::default_instance_->InitAsDefaultInstance();
  Mydis_DbOperate_ConditionGroup::default_instance_->InitAsDefaultInstance();
  Mydis_DbOperate_OrderBy::default_instance_->InitAsDefaultInstance();
  Record::default_instance_->InitAsDefaultInstance();
  Field::default_instance_->InitAsDefaultInstance();
  Result::default_instance_->InitAsDefaultInstance();
  Result_DataLocate::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_mydis_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_mydis_2eproto {
  StaticDescriptorInitializer_mydis_2eproto() {
    protobuf_AddDesc_mydis_2eproto();
  }
} static_descriptor_initializer_mydis_2eproto_;
const ::google::protobuf::EnumDescriptor* E_COL_TYPE_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return E_COL_TYPE_descriptor_;
}
bool E_COL_TYPE_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* Mydis_RedisOperate_OPERATE_TYPE_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Mydis_RedisOperate_OPERATE_TYPE_descriptor_;
}
bool Mydis_RedisOperate_OPERATE_TYPE_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Mydis_RedisOperate_OPERATE_TYPE Mydis_RedisOperate::T_READ;
const Mydis_RedisOperate_OPERATE_TYPE Mydis_RedisOperate::T_WRITE;
const Mydis_RedisOperate_OPERATE_TYPE Mydis_RedisOperate::OPERATE_TYPE_MIN;
const Mydis_RedisOperate_OPERATE_TYPE Mydis_RedisOperate::OPERATE_TYPE_MAX;
const int Mydis_RedisOperate::OPERATE_TYPE_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Mydis_RedisOperate::kKeyNameFieldNumber;
const int Mydis_RedisOperate::kRedisCmdReadFieldNumber;
const int Mydis_RedisOperate::kRedisCmdWriteFieldNumber;
const int Mydis_RedisOperate::kOpTypeFieldNumber;
const int Mydis_RedisOperate::kFieldsFieldNumber;
const int Mydis_RedisOperate::kKeyTtlFieldNumber;
const int Mydis_RedisOperate::kRedisStructureFieldNumber;
const int Mydis_RedisOperate::kDataPurposeFieldNumber;
const int Mydis_RedisOperate::kHashKeyFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Mydis_RedisOperate::Mydis_RedisOperate()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:neb.Mydis.RedisOperate)
}

void Mydis_RedisOperate::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

Mydis_RedisOperate::Mydis_RedisOperate(const Mydis_RedisOperate& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:neb.Mydis.RedisOperate)
}

void Mydis_RedisOperate::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  key_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  redis_cmd_read_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  redis_cmd_write_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  op_type_ = 0;
  key_ttl_ = 0;
  redis_structure_ = 0;
  data_purpose_ = 0;
  hash_key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

Mydis_RedisOperate::~Mydis_RedisOperate() {
  // @@protoc_insertion_point(destructor:neb.Mydis.RedisOperate)
  SharedDtor();
}

void Mydis_RedisOperate::SharedDtor() {
  key_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  redis_cmd_read_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  redis_cmd_write_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  hash_key_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void Mydis_RedisOperate::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Mydis_RedisOperate::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Mydis_RedisOperate_descriptor_;
}

const Mydis_RedisOperate& Mydis_RedisOperate::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mydis_2eproto();
  return *default_instance_;
}

Mydis_RedisOperate* Mydis_RedisOperate::default_instance_ = NULL;

Mydis_RedisOperate* Mydis_RedisOperate::New(::google::protobuf::Arena* arena) const {
  Mydis_RedisOperate* n = new Mydis_RedisOperate;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Mydis_RedisOperate::Clear() {
// @@protoc_insertion_point(message_clear_start:neb.Mydis.RedisOperate)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(Mydis_RedisOperate, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<Mydis_RedisOperate*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(op_type_, data_purpose_);
  key_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  redis_cmd_read_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  redis_cmd_write_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  hash_key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());

#undef ZR_HELPER_
#undef ZR_

  fields_.Clear();
}

bool Mydis_RedisOperate::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:neb.Mydis.RedisOperate)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes key_name = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_key_name()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_redis_cmd_read;
        break;
      }

      // optional string redis_cmd_read = 2;
      case 2: {
        if (tag == 18) {
         parse_redis_cmd_read:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_redis_cmd_read()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->redis_cmd_read().data(), this->redis_cmd_read().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "neb.Mydis.RedisOperate.redis_cmd_read"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_redis_cmd_write;
        break;
      }

      // optional string redis_cmd_write = 3;
      case 3: {
        if (tag == 26) {
         parse_redis_cmd_write:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_redis_cmd_write()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->redis_cmd_write().data(), this->redis_cmd_write().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "neb.Mydis.RedisOperate.redis_cmd_write"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_op_type;
        break;
      }

      // optional .neb.Mydis.RedisOperate.OPERATE_TYPE op_type = 4;
      case 4: {
        if (tag == 32) {
         parse_op_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_op_type(static_cast< ::neb::Mydis_RedisOperate_OPERATE_TYPE >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_fields;
        break;
      }

      // repeated .neb.Field fields = 5;
      case 5: {
        if (tag == 42) {
         parse_fields:
          DO_(input->IncrementRecursionDepth());
         parse_loop_fields:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_fields()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_loop_fields;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectTag(48)) goto parse_key_ttl;
        break;
      }

      // optional int32 key_ttl = 6;
      case 6: {
        if (tag == 48) {
         parse_key_ttl:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &key_ttl_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_redis_structure;
        break;
      }

      // optional int32 redis_structure = 7;
      case 7: {
        if (tag == 56) {
         parse_redis_structure:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &redis_structure_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_data_purpose;
        break;
      }

      // optional int32 data_purpose = 8;
      case 8: {
        if (tag == 64) {
         parse_data_purpose:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &data_purpose_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_hash_key;
        break;
      }

      // optional bytes hash_key = 9;
      case 9: {
        if (tag == 74) {
         parse_hash_key:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_hash_key()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:neb.Mydis.RedisOperate)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:neb.Mydis.RedisOperate)
  return false;
#undef DO_
}

void Mydis_RedisOperate::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:neb.Mydis.RedisOperate)
  // optional bytes key_name = 1;
  if (this->key_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->key_name(), output);
  }

  // optional string redis_cmd_read = 2;
  if (this->redis_cmd_read().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->redis_cmd_read().data(), this->redis_cmd_read().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "neb.Mydis.RedisOperate.redis_cmd_read");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->redis_cmd_read(), output);
  }

  // optional string redis_cmd_write = 3;
  if (this->redis_cmd_write().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->redis_cmd_write().data(), this->redis_cmd_write().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "neb.Mydis.RedisOperate.redis_cmd_write");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->redis_cmd_write(), output);
  }

  // optional .neb.Mydis.RedisOperate.OPERATE_TYPE op_type = 4;
  if (this->op_type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->op_type(), output);
  }

  // repeated .neb.Field fields = 5;
  for (unsigned int i = 0, n = this->fields_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->fields(i), output);
  }

  // optional int32 key_ttl = 6;
  if (this->key_ttl() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->key_ttl(), output);
  }

  // optional int32 redis_structure = 7;
  if (this->redis_structure() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->redis_structure(), output);
  }

  // optional int32 data_purpose = 8;
  if (this->data_purpose() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->data_purpose(), output);
  }

  // optional bytes hash_key = 9;
  if (this->hash_key().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      9, this->hash_key(), output);
  }

  // @@protoc_insertion_point(serialize_end:neb.Mydis.RedisOperate)
}

::google::protobuf::uint8* Mydis_RedisOperate::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:neb.Mydis.RedisOperate)
  // optional bytes key_name = 1;
  if (this->key_name().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->key_name(), target);
  }

  // optional string redis_cmd_read = 2;
  if (this->redis_cmd_read().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->redis_cmd_read().data(), this->redis_cmd_read().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "neb.Mydis.RedisOperate.redis_cmd_read");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->redis_cmd_read(), target);
  }

  // optional string redis_cmd_write = 3;
  if (this->redis_cmd_write().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->redis_cmd_write().data(), this->redis_cmd_write().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "neb.Mydis.RedisOperate.redis_cmd_write");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->redis_cmd_write(), target);
  }

  // optional .neb.Mydis.RedisOperate.OPERATE_TYPE op_type = 4;
  if (this->op_type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->op_type(), target);
  }

  // repeated .neb.Field fields = 5;
  for (unsigned int i = 0, n = this->fields_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        5, this->fields(i), false, target);
  }

  // optional int32 key_ttl = 6;
  if (this->key_ttl() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->key_ttl(), target);
  }

  // optional int32 redis_structure = 7;
  if (this->redis_structure() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->redis_structure(), target);
  }

  // optional int32 data_purpose = 8;
  if (this->data_purpose() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->data_purpose(), target);
  }

  // optional bytes hash_key = 9;
  if (this->hash_key().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        9, this->hash_key(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:neb.Mydis.RedisOperate)
  return target;
}

int Mydis_RedisOperate::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:neb.Mydis.RedisOperate)
  int total_size = 0;

  // optional bytes key_name = 1;
  if (this->key_name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->key_name());
  }

  // optional string redis_cmd_read = 2;
  if (this->redis_cmd_read().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->redis_cmd_read());
  }

  // optional string redis_cmd_write = 3;
  if (this->redis_cmd_write().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->redis_cmd_write());
  }

  // optional .neb.Mydis.RedisOperate.OPERATE_TYPE op_type = 4;
  if (this->op_type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->op_type());
  }

  // optional int32 key_ttl = 6;
  if (this->key_ttl() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->key_ttl());
  }

  // optional int32 redis_structure = 7;
  if (this->redis_structure() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->redis_structure());
  }

  // optional int32 data_purpose = 8;
  if (this->data_purpose() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->data_purpose());
  }

  // optional bytes hash_key = 9;
  if (this->hash_key().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->hash_key());
  }

  // repeated .neb.Field fields = 5;
  total_size += 1 * this->fields_size();
  for (int i = 0; i < this->fields_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->fields(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Mydis_RedisOperate::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:neb.Mydis.RedisOperate)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const Mydis_RedisOperate* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Mydis_RedisOperate>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:neb.Mydis.RedisOperate)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:neb.Mydis.RedisOperate)
    MergeFrom(*source);
  }
}

void Mydis_RedisOperate::MergeFrom(const Mydis_RedisOperate& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:neb.Mydis.RedisOperate)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  fields_.MergeFrom(from.fields_);
  if (from.key_name().size() > 0) {

    key_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.key_name_);
  }
  if (from.redis_cmd_read().size() > 0) {

    redis_cmd_read_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.redis_cmd_read_);
  }
  if (from.redis_cmd_write().size() > 0) {

    redis_cmd_write_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.redis_cmd_write_);
  }
  if (from.op_type() != 0) {
    set_op_type(from.op_type());
  }
  if (from.key_ttl() != 0) {
    set_key_ttl(from.key_ttl());
  }
  if (from.redis_structure() != 0) {
    set_redis_structure(from.redis_structure());
  }
  if (from.data_purpose() != 0) {
    set_data_purpose(from.data_purpose());
  }
  if (from.hash_key().size() > 0) {

    hash_key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.hash_key_);
  }
}

void Mydis_RedisOperate::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:neb.Mydis.RedisOperate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Mydis_RedisOperate::CopyFrom(const Mydis_RedisOperate& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:neb.Mydis.RedisOperate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Mydis_RedisOperate::IsInitialized() const {

  return true;
}

void Mydis_RedisOperate::Swap(Mydis_RedisOperate* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Mydis_RedisOperate::InternalSwap(Mydis_RedisOperate* other) {
  key_name_.Swap(&other->key_name_);
  redis_cmd_read_.Swap(&other->redis_cmd_read_);
  redis_cmd_write_.Swap(&other->redis_cmd_write_);
  std::swap(op_type_, other->op_type_);
  fields_.UnsafeArenaSwap(&other->fields_);
  std::swap(key_ttl_, other->key_ttl_);
  std::swap(redis_structure_, other->redis_structure_);
  std::swap(data_purpose_, other->data_purpose_);
  hash_key_.Swap(&other->hash_key_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Mydis_RedisOperate::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Mydis_RedisOperate_descriptor_;
  metadata.reflection = Mydis_RedisOperate_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

const ::google::protobuf::EnumDescriptor* Mydis_DbOperate_E_QUERY_TYPE_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Mydis_DbOperate_E_QUERY_TYPE_descriptor_;
}
bool Mydis_DbOperate_E_QUERY_TYPE_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Mydis_DbOperate_E_QUERY_TYPE Mydis_DbOperate::SELECT;
const Mydis_DbOperate_E_QUERY_TYPE Mydis_DbOperate::INSERT;
const Mydis_DbOperate_E_QUERY_TYPE Mydis_DbOperate::INSERT_IGNORE;
const Mydis_DbOperate_E_QUERY_TYPE Mydis_DbOperate::UPDATE;
const Mydis_DbOperate_E_QUERY_TYPE Mydis_DbOperate::REPLACE;
const Mydis_DbOperate_E_QUERY_TYPE Mydis_DbOperate::DELETE;
const Mydis_DbOperate_E_QUERY_TYPE Mydis_DbOperate::E_QUERY_TYPE_MIN;
const Mydis_DbOperate_E_QUERY_TYPE Mydis_DbOperate::E_QUERY_TYPE_MAX;
const int Mydis_DbOperate::E_QUERY_TYPE_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* Mydis_DbOperate_Condition_E_RELATION_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Mydis_DbOperate_Condition_E_RELATION_descriptor_;
}
bool Mydis_DbOperate_Condition_E_RELATION_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Mydis_DbOperate_Condition_E_RELATION Mydis_DbOperate_Condition::EQ;
const Mydis_DbOperate_Condition_E_RELATION Mydis_DbOperate_Condition::NE;
const Mydis_DbOperate_Condition_E_RELATION Mydis_DbOperate_Condition::GT;
const Mydis_DbOperate_Condition_E_RELATION Mydis_DbOperate_Condition::LT;
const Mydis_DbOperate_Condition_E_RELATION Mydis_DbOperate_Condition::GE;
const Mydis_DbOperate_Condition_E_RELATION Mydis_DbOperate_Condition::LE;
const Mydis_DbOperate_Condition_E_RELATION Mydis_DbOperate_Condition::LIKE;
const Mydis_DbOperate_Condition_E_RELATION Mydis_DbOperate_Condition::IN;
const Mydis_DbOperate_Condition_E_RELATION Mydis_DbOperate_Condition::E_RELATION_MIN;
const Mydis_DbOperate_Condition_E_RELATION Mydis_DbOperate_Condition::E_RELATION_MAX;
const int Mydis_DbOperate_Condition::E_RELATION_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Mydis_DbOperate_Condition::kRelationFieldNumber;
const int Mydis_DbOperate_Condition::kColTypeFieldNumber;
const int Mydis_DbOperate_Condition::kColNameFieldNumber;
const int Mydis_DbOperate_Condition::kColValuesFieldNumber;
const int Mydis_DbOperate_Condition::kColNameRightFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Mydis_DbOperate_Condition::Mydis_DbOperate_Condition()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:neb.Mydis.DbOperate.Condition)
}

void Mydis_DbOperate_Condition::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

Mydis_DbOperate_Condition::Mydis_DbOperate_Condition(const Mydis_DbOperate_Condition& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:neb.Mydis.DbOperate.Condition)
}

void Mydis_DbOperate_Condition::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  relation_ = 0;
  col_type_ = 0;
  col_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  col_name_right_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

Mydis_DbOperate_Condition::~Mydis_DbOperate_Condition() {
  // @@protoc_insertion_point(destructor:neb.Mydis.DbOperate.Condition)
  SharedDtor();
}

void Mydis_DbOperate_Condition::SharedDtor() {
  col_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  col_name_right_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void Mydis_DbOperate_Condition::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Mydis_DbOperate_Condition::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Mydis_DbOperate_Condition_descriptor_;
}

const Mydis_DbOperate_Condition& Mydis_DbOperate_Condition::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mydis_2eproto();
  return *default_instance_;
}

Mydis_DbOperate_Condition* Mydis_DbOperate_Condition::default_instance_ = NULL;

Mydis_DbOperate_Condition* Mydis_DbOperate_Condition::New(::google::protobuf::Arena* arena) const {
  Mydis_DbOperate_Condition* n = new Mydis_DbOperate_Condition;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Mydis_DbOperate_Condition::Clear() {
// @@protoc_insertion_point(message_clear_start:neb.Mydis.DbOperate.Condition)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(Mydis_DbOperate_Condition, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<Mydis_DbOperate_Condition*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(relation_, col_type_);
  col_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  col_name_right_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());

#undef ZR_HELPER_
#undef ZR_

  col_values_.Clear();
}

bool Mydis_DbOperate_Condition::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:neb.Mydis.DbOperate.Condition)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .neb.Mydis.DbOperate.Condition.E_RELATION relation = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_relation(static_cast< ::neb::Mydis_DbOperate_Condition_E_RELATION >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_col_type;
        break;
      }

      // optional .neb.E_COL_TYPE col_type = 2;
      case 2: {
        if (tag == 16) {
         parse_col_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_col_type(static_cast< ::neb::E_COL_TYPE >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_col_name;
        break;
      }

      // optional string col_name = 3;
      case 3: {
        if (tag == 26) {
         parse_col_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_col_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->col_name().data(), this->col_name().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "neb.Mydis.DbOperate.Condition.col_name"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_col_values;
        break;
      }

      // repeated bytes col_values = 4;
      case 4: {
        if (tag == 34) {
         parse_col_values:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->add_col_values()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_col_values;
        if (input->ExpectTag(42)) goto parse_col_name_right;
        break;
      }

      // optional string col_name_right = 5;
      case 5: {
        if (tag == 42) {
         parse_col_name_right:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_col_name_right()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->col_name_right().data(), this->col_name_right().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "neb.Mydis.DbOperate.Condition.col_name_right"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:neb.Mydis.DbOperate.Condition)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:neb.Mydis.DbOperate.Condition)
  return false;
#undef DO_
}

void Mydis_DbOperate_Condition::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:neb.Mydis.DbOperate.Condition)
  // optional .neb.Mydis.DbOperate.Condition.E_RELATION relation = 1;
  if (this->relation() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->relation(), output);
  }

  // optional .neb.E_COL_TYPE col_type = 2;
  if (this->col_type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->col_type(), output);
  }

  // optional string col_name = 3;
  if (this->col_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->col_name().data(), this->col_name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "neb.Mydis.DbOperate.Condition.col_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->col_name(), output);
  }

  // repeated bytes col_values = 4;
  for (int i = 0; i < this->col_values_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      4, this->col_values(i), output);
  }

  // optional string col_name_right = 5;
  if (this->col_name_right().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->col_name_right().data(), this->col_name_right().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "neb.Mydis.DbOperate.Condition.col_name_right");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->col_name_right(), output);
  }

  // @@protoc_insertion_point(serialize_end:neb.Mydis.DbOperate.Condition)
}

::google::protobuf::uint8* Mydis_DbOperate_Condition::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:neb.Mydis.DbOperate.Condition)
  // optional .neb.Mydis.DbOperate.Condition.E_RELATION relation = 1;
  if (this->relation() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->relation(), target);
  }

  // optional .neb.E_COL_TYPE col_type = 2;
  if (this->col_type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->col_type(), target);
  }

  // optional string col_name = 3;
  if (this->col_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->col_name().data(), this->col_name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "neb.Mydis.DbOperate.Condition.col_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->col_name(), target);
  }

  // repeated bytes col_values = 4;
  for (int i = 0; i < this->col_values_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteBytesToArray(4, this->col_values(i), target);
  }

  // optional string col_name_right = 5;
  if (this->col_name_right().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->col_name_right().data(), this->col_name_right().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "neb.Mydis.DbOperate.Condition.col_name_right");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->col_name_right(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:neb.Mydis.DbOperate.Condition)
  return target;
}

int Mydis_DbOperate_Condition::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:neb.Mydis.DbOperate.Condition)
  int total_size = 0;

  // optional .neb.Mydis.DbOperate.Condition.E_RELATION relation = 1;
  if (this->relation() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->relation());
  }

  // optional .neb.E_COL_TYPE col_type = 2;
  if (this->col_type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->col_type());
  }

  // optional string col_name = 3;
  if (this->col_name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->col_name());
  }

  // optional string col_name_right = 5;
  if (this->col_name_right().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->col_name_right());
  }

  // repeated bytes col_values = 4;
  total_size += 1 * this->col_values_size();
  for (int i = 0; i < this->col_values_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::BytesSize(
      this->col_values(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Mydis_DbOperate_Condition::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:neb.Mydis.DbOperate.Condition)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const Mydis_DbOperate_Condition* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Mydis_DbOperate_Condition>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:neb.Mydis.DbOperate.Condition)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:neb.Mydis.DbOperate.Condition)
    MergeFrom(*source);
  }
}

void Mydis_DbOperate_Condition::MergeFrom(const Mydis_DbOperate_Condition& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:neb.Mydis.DbOperate.Condition)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  col_values_.MergeFrom(from.col_values_);
  if (from.relation() != 0) {
    set_relation(from.relation());
  }
  if (from.col_type() != 0) {
    set_col_type(from.col_type());
  }
  if (from.col_name().size() > 0) {

    col_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.col_name_);
  }
  if (from.col_name_right().size() > 0) {

    col_name_right_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.col_name_right_);
  }
}

void Mydis_DbOperate_Condition::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:neb.Mydis.DbOperate.Condition)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Mydis_DbOperate_Condition::CopyFrom(const Mydis_DbOperate_Condition& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:neb.Mydis.DbOperate.Condition)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Mydis_DbOperate_Condition::IsInitialized() const {

  return true;
}

void Mydis_DbOperate_Condition::Swap(Mydis_DbOperate_Condition* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Mydis_DbOperate_Condition::InternalSwap(Mydis_DbOperate_Condition* other) {
  std::swap(relation_, other->relation_);
  std::swap(col_type_, other->col_type_);
  col_name_.Swap(&other->col_name_);
  col_values_.UnsafeArenaSwap(&other->col_values_);
  col_name_right_.Swap(&other->col_name_right_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Mydis_DbOperate_Condition::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Mydis_DbOperate_Condition_descriptor_;
  metadata.reflection = Mydis_DbOperate_Condition_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

const ::google::protobuf::EnumDescriptor* Mydis_DbOperate_ConditionGroup_E_RELATION_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Mydis_DbOperate_ConditionGroup_E_RELATION_descriptor_;
}
bool Mydis_DbOperate_ConditionGroup_E_RELATION_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Mydis_DbOperate_ConditionGroup_E_RELATION Mydis_DbOperate_ConditionGroup::AND;
const Mydis_DbOperate_ConditionGroup_E_RELATION Mydis_DbOperate_ConditionGroup::OR;
const Mydis_DbOperate_ConditionGroup_E_RELATION Mydis_DbOperate_ConditionGroup::E_RELATION_MIN;
const Mydis_DbOperate_ConditionGroup_E_RELATION Mydis_DbOperate_ConditionGroup::E_RELATION_MAX;
const int Mydis_DbOperate_ConditionGroup::E_RELATION_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Mydis_DbOperate_ConditionGroup::kRelationFieldNumber;
const int Mydis_DbOperate_ConditionGroup::kConditionFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Mydis_DbOperate_ConditionGroup::Mydis_DbOperate_ConditionGroup()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:neb.Mydis.DbOperate.ConditionGroup)
}

void Mydis_DbOperate_ConditionGroup::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

Mydis_DbOperate_ConditionGroup::Mydis_DbOperate_ConditionGroup(const Mydis_DbOperate_ConditionGroup& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:neb.Mydis.DbOperate.ConditionGroup)
}

void Mydis_DbOperate_ConditionGroup::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  relation_ = 0;
}

Mydis_DbOperate_ConditionGroup::~Mydis_DbOperate_ConditionGroup() {
  // @@protoc_insertion_point(destructor:neb.Mydis.DbOperate.ConditionGroup)
  SharedDtor();
}

void Mydis_DbOperate_ConditionGroup::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Mydis_DbOperate_ConditionGroup::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Mydis_DbOperate_ConditionGroup::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Mydis_DbOperate_ConditionGroup_descriptor_;
}

const Mydis_DbOperate_ConditionGroup& Mydis_DbOperate_ConditionGroup::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mydis_2eproto();
  return *default_instance_;
}

Mydis_DbOperate_ConditionGroup* Mydis_DbOperate_ConditionGroup::default_instance_ = NULL;

Mydis_DbOperate_ConditionGroup* Mydis_DbOperate_ConditionGroup::New(::google::protobuf::Arena* arena) const {
  Mydis_DbOperate_ConditionGroup* n = new Mydis_DbOperate_ConditionGroup;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Mydis_DbOperate_ConditionGroup::Clear() {
// @@protoc_insertion_point(message_clear_start:neb.Mydis.DbOperate.ConditionGroup)
  relation_ = 0;
  condition_.Clear();
}

bool Mydis_DbOperate_ConditionGroup::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:neb.Mydis.DbOperate.ConditionGroup)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .neb.Mydis.DbOperate.ConditionGroup.E_RELATION relation = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_relation(static_cast< ::neb::Mydis_DbOperate_ConditionGroup_E_RELATION >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_condition;
        break;
      }

      // repeated .neb.Mydis.DbOperate.Condition condition = 2;
      case 2: {
        if (tag == 18) {
         parse_condition:
          DO_(input->IncrementRecursionDepth());
         parse_loop_condition:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_condition()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_loop_condition;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:neb.Mydis.DbOperate.ConditionGroup)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:neb.Mydis.DbOperate.ConditionGroup)
  return false;
#undef DO_
}

void Mydis_DbOperate_ConditionGroup::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:neb.Mydis.DbOperate.ConditionGroup)
  // optional .neb.Mydis.DbOperate.ConditionGroup.E_RELATION relation = 1;
  if (this->relation() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->relation(), output);
  }

  // repeated .neb.Mydis.DbOperate.Condition condition = 2;
  for (unsigned int i = 0, n = this->condition_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->condition(i), output);
  }

  // @@protoc_insertion_point(serialize_end:neb.Mydis.DbOperate.ConditionGroup)
}

::google::protobuf::uint8* Mydis_DbOperate_ConditionGroup::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:neb.Mydis.DbOperate.ConditionGroup)
  // optional .neb.Mydis.DbOperate.ConditionGroup.E_RELATION relation = 1;
  if (this->relation() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->relation(), target);
  }

  // repeated .neb.Mydis.DbOperate.Condition condition = 2;
  for (unsigned int i = 0, n = this->condition_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, this->condition(i), false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:neb.Mydis.DbOperate.ConditionGroup)
  return target;
}

int Mydis_DbOperate_ConditionGroup::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:neb.Mydis.DbOperate.ConditionGroup)
  int total_size = 0;

  // optional .neb.Mydis.DbOperate.ConditionGroup.E_RELATION relation = 1;
  if (this->relation() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->relation());
  }

  // repeated .neb.Mydis.DbOperate.Condition condition = 2;
  total_size += 1 * this->condition_size();
  for (int i = 0; i < this->condition_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->condition(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Mydis_DbOperate_ConditionGroup::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:neb.Mydis.DbOperate.ConditionGroup)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const Mydis_DbOperate_ConditionGroup* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Mydis_DbOperate_ConditionGroup>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:neb.Mydis.DbOperate.ConditionGroup)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:neb.Mydis.DbOperate.ConditionGroup)
    MergeFrom(*source);
  }
}

void Mydis_DbOperate_ConditionGroup::MergeFrom(const Mydis_DbOperate_ConditionGroup& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:neb.Mydis.DbOperate.ConditionGroup)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  condition_.MergeFrom(from.condition_);
  if (from.relation() != 0) {
    set_relation(from.relation());
  }
}

void Mydis_DbOperate_ConditionGroup::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:neb.Mydis.DbOperate.ConditionGroup)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Mydis_DbOperate_ConditionGroup::CopyFrom(const Mydis_DbOperate_ConditionGroup& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:neb.Mydis.DbOperate.ConditionGroup)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Mydis_DbOperate_ConditionGroup::IsInitialized() const {

  return true;
}

void Mydis_DbOperate_ConditionGroup::Swap(Mydis_DbOperate_ConditionGroup* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Mydis_DbOperate_ConditionGroup::InternalSwap(Mydis_DbOperate_ConditionGroup* other) {
  std::swap(relation_, other->relation_);
  condition_.UnsafeArenaSwap(&other->condition_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Mydis_DbOperate_ConditionGroup::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Mydis_DbOperate_ConditionGroup_descriptor_;
  metadata.reflection = Mydis_DbOperate_ConditionGroup_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

const ::google::protobuf::EnumDescriptor* Mydis_DbOperate_OrderBy_E_RELATION_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Mydis_DbOperate_OrderBy_E_RELATION_descriptor_;
}
bool Mydis_DbOperate_OrderBy_E_RELATION_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Mydis_DbOperate_OrderBy_E_RELATION Mydis_DbOperate_OrderBy::ASC;
const Mydis_DbOperate_OrderBy_E_RELATION Mydis_DbOperate_OrderBy::DESC;
const Mydis_DbOperate_OrderBy_E_RELATION Mydis_DbOperate_OrderBy::E_RELATION_MIN;
const Mydis_DbOperate_OrderBy_E_RELATION Mydis_DbOperate_OrderBy::E_RELATION_MAX;
const int Mydis_DbOperate_OrderBy::E_RELATION_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Mydis_DbOperate_OrderBy::kRelationFieldNumber;
const int Mydis_DbOperate_OrderBy::kColNameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Mydis_DbOperate_OrderBy::Mydis_DbOperate_OrderBy()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:neb.Mydis.DbOperate.OrderBy)
}

void Mydis_DbOperate_OrderBy::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

Mydis_DbOperate_OrderBy::Mydis_DbOperate_OrderBy(const Mydis_DbOperate_OrderBy& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:neb.Mydis.DbOperate.OrderBy)
}

void Mydis_DbOperate_OrderBy::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  relation_ = 0;
  col_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

Mydis_DbOperate_OrderBy::~Mydis_DbOperate_OrderBy() {
  // @@protoc_insertion_point(destructor:neb.Mydis.DbOperate.OrderBy)
  SharedDtor();
}

void Mydis_DbOperate_OrderBy::SharedDtor() {
  col_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void Mydis_DbOperate_OrderBy::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Mydis_DbOperate_OrderBy::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Mydis_DbOperate_OrderBy_descriptor_;
}

const Mydis_DbOperate_OrderBy& Mydis_DbOperate_OrderBy::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mydis_2eproto();
  return *default_instance_;
}

Mydis_DbOperate_OrderBy* Mydis_DbOperate_OrderBy::default_instance_ = NULL;

Mydis_DbOperate_OrderBy* Mydis_DbOperate_OrderBy::New(::google::protobuf::Arena* arena) const {
  Mydis_DbOperate_OrderBy* n = new Mydis_DbOperate_OrderBy;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Mydis_DbOperate_OrderBy::Clear() {
// @@protoc_insertion_point(message_clear_start:neb.Mydis.DbOperate.OrderBy)
  relation_ = 0;
  col_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool Mydis_DbOperate_OrderBy::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:neb.Mydis.DbOperate.OrderBy)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .neb.Mydis.DbOperate.OrderBy.E_RELATION relation = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_relation(static_cast< ::neb::Mydis_DbOperate_OrderBy_E_RELATION >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_col_name;
        break;
      }

      // optional string col_name = 2;
      case 2: {
        if (tag == 18) {
         parse_col_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_col_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->col_name().data(), this->col_name().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "neb.Mydis.DbOperate.OrderBy.col_name"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:neb.Mydis.DbOperate.OrderBy)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:neb.Mydis.DbOperate.OrderBy)
  return false;
#undef DO_
}

void Mydis_DbOperate_OrderBy::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:neb.Mydis.DbOperate.OrderBy)
  // optional .neb.Mydis.DbOperate.OrderBy.E_RELATION relation = 1;
  if (this->relation() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->relation(), output);
  }

  // optional string col_name = 2;
  if (this->col_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->col_name().data(), this->col_name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "neb.Mydis.DbOperate.OrderBy.col_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->col_name(), output);
  }

  // @@protoc_insertion_point(serialize_end:neb.Mydis.DbOperate.OrderBy)
}

::google::protobuf::uint8* Mydis_DbOperate_OrderBy::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:neb.Mydis.DbOperate.OrderBy)
  // optional .neb.Mydis.DbOperate.OrderBy.E_RELATION relation = 1;
  if (this->relation() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->relation(), target);
  }

  // optional string col_name = 2;
  if (this->col_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->col_name().data(), this->col_name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "neb.Mydis.DbOperate.OrderBy.col_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->col_name(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:neb.Mydis.DbOperate.OrderBy)
  return target;
}

int Mydis_DbOperate_OrderBy::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:neb.Mydis.DbOperate.OrderBy)
  int total_size = 0;

  // optional .neb.Mydis.DbOperate.OrderBy.E_RELATION relation = 1;
  if (this->relation() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->relation());
  }

  // optional string col_name = 2;
  if (this->col_name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->col_name());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Mydis_DbOperate_OrderBy::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:neb.Mydis.DbOperate.OrderBy)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const Mydis_DbOperate_OrderBy* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Mydis_DbOperate_OrderBy>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:neb.Mydis.DbOperate.OrderBy)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:neb.Mydis.DbOperate.OrderBy)
    MergeFrom(*source);
  }
}

void Mydis_DbOperate_OrderBy::MergeFrom(const Mydis_DbOperate_OrderBy& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:neb.Mydis.DbOperate.OrderBy)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.relation() != 0) {
    set_relation(from.relation());
  }
  if (from.col_name().size() > 0) {

    col_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.col_name_);
  }
}

void Mydis_DbOperate_OrderBy::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:neb.Mydis.DbOperate.OrderBy)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Mydis_DbOperate_OrderBy::CopyFrom(const Mydis_DbOperate_OrderBy& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:neb.Mydis.DbOperate.OrderBy)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Mydis_DbOperate_OrderBy::IsInitialized() const {

  return true;
}

void Mydis_DbOperate_OrderBy::Swap(Mydis_DbOperate_OrderBy* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Mydis_DbOperate_OrderBy::InternalSwap(Mydis_DbOperate_OrderBy* other) {
  std::swap(relation_, other->relation_);
  col_name_.Swap(&other->col_name_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Mydis_DbOperate_OrderBy::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Mydis_DbOperate_OrderBy_descriptor_;
  metadata.reflection = Mydis_DbOperate_OrderBy_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Mydis_DbOperate::kQueryTypeFieldNumber;
const int Mydis_DbOperate::kTableNameFieldNumber;
const int Mydis_DbOperate::kFieldsFieldNumber;
const int Mydis_DbOperate::kConditionsFieldNumber;
const int Mydis_DbOperate::kGroupbyColFieldNumber;
const int Mydis_DbOperate::kOrderbyColFieldNumber;
const int Mydis_DbOperate::kGroupRelationFieldNumber;
const int Mydis_DbOperate::kLimitFieldNumber;
const int Mydis_DbOperate::kLimitFromFieldNumber;
const int Mydis_DbOperate::kModFactorFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Mydis_DbOperate::Mydis_DbOperate()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:neb.Mydis.DbOperate)
}

void Mydis_DbOperate::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

Mydis_DbOperate::Mydis_DbOperate(const Mydis_DbOperate& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:neb.Mydis.DbOperate)
}

void Mydis_DbOperate::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  query_type_ = 0;
  table_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  group_relation_ = 0;
  limit_ = 0u;
  limit_from_ = 0u;
  mod_factor_ = 0u;
}

Mydis_DbOperate::~Mydis_DbOperate() {
  // @@protoc_insertion_point(destructor:neb.Mydis.DbOperate)
  SharedDtor();
}

void Mydis_DbOperate::SharedDtor() {
  table_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void Mydis_DbOperate::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Mydis_DbOperate::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Mydis_DbOperate_descriptor_;
}

const Mydis_DbOperate& Mydis_DbOperate::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mydis_2eproto();
  return *default_instance_;
}

Mydis_DbOperate* Mydis_DbOperate::default_instance_ = NULL;

Mydis_DbOperate* Mydis_DbOperate::New(::google::protobuf::Arena* arena) const {
  Mydis_DbOperate* n = new Mydis_DbOperate;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Mydis_DbOperate::Clear() {
// @@protoc_insertion_point(message_clear_start:neb.Mydis.DbOperate)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(Mydis_DbOperate, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<Mydis_DbOperate*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(query_type_, group_relation_);
  table_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  limit_ = 0u;
  ZR_(limit_from_, mod_factor_);

#undef ZR_HELPER_
#undef ZR_

  fields_.Clear();
  conditions_.Clear();
  groupby_col_.Clear();
  orderby_col_.Clear();
}

bool Mydis_DbOperate::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:neb.Mydis.DbOperate)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .neb.Mydis.DbOperate.E_QUERY_TYPE query_type = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_query_type(static_cast< ::neb::Mydis_DbOperate_E_QUERY_TYPE >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_table_name;
        break;
      }

      // optional string table_name = 2;
      case 2: {
        if (tag == 18) {
         parse_table_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_table_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->table_name().data(), this->table_name().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "neb.Mydis.DbOperate.table_name"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_fields;
        break;
      }

      // repeated .neb.Field fields = 3;
      case 3: {
        if (tag == 26) {
         parse_fields:
          DO_(input->IncrementRecursionDepth());
         parse_loop_fields:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_fields()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_loop_fields;
        if (input->ExpectTag(34)) goto parse_loop_conditions;
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      // repeated .neb.Mydis.DbOperate.ConditionGroup conditions = 4;
      case 4: {
        if (tag == 34) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_conditions:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_conditions()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_loop_conditions;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectTag(42)) goto parse_groupby_col;
        break;
      }

      // repeated string groupby_col = 5;
      case 5: {
        if (tag == 42) {
         parse_groupby_col:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_groupby_col()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->groupby_col(this->groupby_col_size() - 1).data(),
            this->groupby_col(this->groupby_col_size() - 1).length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "neb.Mydis.DbOperate.groupby_col"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_groupby_col;
        if (input->ExpectTag(50)) goto parse_orderby_col;
        break;
      }

      // repeated .neb.Mydis.DbOperate.OrderBy orderby_col = 6;
      case 6: {
        if (tag == 50) {
         parse_orderby_col:
          DO_(input->IncrementRecursionDepth());
         parse_loop_orderby_col:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_orderby_col()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_loop_orderby_col;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectTag(56)) goto parse_group_relation;
        break;
      }

      // optional .neb.Mydis.DbOperate.ConditionGroup.E_RELATION group_relation = 7;
      case 7: {
        if (tag == 56) {
         parse_group_relation:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_group_relation(static_cast< ::neb::Mydis_DbOperate_ConditionGroup_E_RELATION >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_limit;
        break;
      }

      // optional uint32 limit = 8;
      case 8: {
        if (tag == 64) {
         parse_limit:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &limit_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_limit_from;
        break;
      }

      // optional uint32 limit_from = 9;
      case 9: {
        if (tag == 72) {
         parse_limit_from:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &limit_from_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_mod_factor;
        break;
      }

      // optional uint32 mod_factor = 10;
      case 10: {
        if (tag == 80) {
         parse_mod_factor:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &mod_factor_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:neb.Mydis.DbOperate)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:neb.Mydis.DbOperate)
  return false;
#undef DO_
}

void Mydis_DbOperate::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:neb.Mydis.DbOperate)
  // optional .neb.Mydis.DbOperate.E_QUERY_TYPE query_type = 1;
  if (this->query_type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->query_type(), output);
  }

  // optional string table_name = 2;
  if (this->table_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->table_name().data(), this->table_name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "neb.Mydis.DbOperate.table_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->table_name(), output);
  }

  // repeated .neb.Field fields = 3;
  for (unsigned int i = 0, n = this->fields_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->fields(i), output);
  }

  // repeated .neb.Mydis.DbOperate.ConditionGroup conditions = 4;
  for (unsigned int i = 0, n = this->conditions_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->conditions(i), output);
  }

  // repeated string groupby_col = 5;
  for (int i = 0; i < this->groupby_col_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->groupby_col(i).data(), this->groupby_col(i).length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "neb.Mydis.DbOperate.groupby_col");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->groupby_col(i), output);
  }

  // repeated .neb.Mydis.DbOperate.OrderBy orderby_col = 6;
  for (unsigned int i = 0, n = this->orderby_col_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->orderby_col(i), output);
  }

  // optional .neb.Mydis.DbOperate.ConditionGroup.E_RELATION group_relation = 7;
  if (this->group_relation() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      7, this->group_relation(), output);
  }

  // optional uint32 limit = 8;
  if (this->limit() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->limit(), output);
  }

  // optional uint32 limit_from = 9;
  if (this->limit_from() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->limit_from(), output);
  }

  // optional uint32 mod_factor = 10;
  if (this->mod_factor() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->mod_factor(), output);
  }

  // @@protoc_insertion_point(serialize_end:neb.Mydis.DbOperate)
}

::google::protobuf::uint8* Mydis_DbOperate::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:neb.Mydis.DbOperate)
  // optional .neb.Mydis.DbOperate.E_QUERY_TYPE query_type = 1;
  if (this->query_type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->query_type(), target);
  }

  // optional string table_name = 2;
  if (this->table_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->table_name().data(), this->table_name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "neb.Mydis.DbOperate.table_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->table_name(), target);
  }

  // repeated .neb.Field fields = 3;
  for (unsigned int i = 0, n = this->fields_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, this->fields(i), false, target);
  }

  // repeated .neb.Mydis.DbOperate.ConditionGroup conditions = 4;
  for (unsigned int i = 0, n = this->conditions_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, this->conditions(i), false, target);
  }

  // repeated string groupby_col = 5;
  for (int i = 0; i < this->groupby_col_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->groupby_col(i).data(), this->groupby_col(i).length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "neb.Mydis.DbOperate.groupby_col");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(5, this->groupby_col(i), target);
  }

  // repeated .neb.Mydis.DbOperate.OrderBy orderby_col = 6;
  for (unsigned int i = 0, n = this->orderby_col_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        6, this->orderby_col(i), false, target);
  }

  // optional .neb.Mydis.DbOperate.ConditionGroup.E_RELATION group_relation = 7;
  if (this->group_relation() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      7, this->group_relation(), target);
  }

  // optional uint32 limit = 8;
  if (this->limit() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->limit(), target);
  }

  // optional uint32 limit_from = 9;
  if (this->limit_from() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->limit_from(), target);
  }

  // optional uint32 mod_factor = 10;
  if (this->mod_factor() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->mod_factor(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:neb.Mydis.DbOperate)
  return target;
}

int Mydis_DbOperate::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:neb.Mydis.DbOperate)
  int total_size = 0;

  // optional .neb.Mydis.DbOperate.E_QUERY_TYPE query_type = 1;
  if (this->query_type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->query_type());
  }

  // optional string table_name = 2;
  if (this->table_name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->table_name());
  }

  // optional .neb.Mydis.DbOperate.ConditionGroup.E_RELATION group_relation = 7;
  if (this->group_relation() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->group_relation());
  }

  // optional uint32 limit = 8;
  if (this->limit() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->limit());
  }

  // optional uint32 limit_from = 9;
  if (this->limit_from() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->limit_from());
  }

  // optional uint32 mod_factor = 10;
  if (this->mod_factor() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->mod_factor());
  }

  // repeated .neb.Field fields = 3;
  total_size += 1 * this->fields_size();
  for (int i = 0; i < this->fields_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->fields(i));
  }

  // repeated .neb.Mydis.DbOperate.ConditionGroup conditions = 4;
  total_size += 1 * this->conditions_size();
  for (int i = 0; i < this->conditions_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->conditions(i));
  }

  // repeated string groupby_col = 5;
  total_size += 1 * this->groupby_col_size();
  for (int i = 0; i < this->groupby_col_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->groupby_col(i));
  }

  // repeated .neb.Mydis.DbOperate.OrderBy orderby_col = 6;
  total_size += 1 * this->orderby_col_size();
  for (int i = 0; i < this->orderby_col_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->orderby_col(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Mydis_DbOperate::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:neb.Mydis.DbOperate)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const Mydis_DbOperate* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Mydis_DbOperate>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:neb.Mydis.DbOperate)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:neb.Mydis.DbOperate)
    MergeFrom(*source);
  }
}

void Mydis_DbOperate::MergeFrom(const Mydis_DbOperate& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:neb.Mydis.DbOperate)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  fields_.MergeFrom(from.fields_);
  conditions_.MergeFrom(from.conditions_);
  groupby_col_.MergeFrom(from.groupby_col_);
  orderby_col_.MergeFrom(from.orderby_col_);
  if (from.query_type() != 0) {
    set_query_type(from.query_type());
  }
  if (from.table_name().size() > 0) {

    table_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.table_name_);
  }
  if (from.group_relation() != 0) {
    set_group_relation(from.group_relation());
  }
  if (from.limit() != 0) {
    set_limit(from.limit());
  }
  if (from.limit_from() != 0) {
    set_limit_from(from.limit_from());
  }
  if (from.mod_factor() != 0) {
    set_mod_factor(from.mod_factor());
  }
}

void Mydis_DbOperate::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:neb.Mydis.DbOperate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Mydis_DbOperate::CopyFrom(const Mydis_DbOperate& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:neb.Mydis.DbOperate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Mydis_DbOperate::IsInitialized() const {

  return true;
}

void Mydis_DbOperate::Swap(Mydis_DbOperate* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Mydis_DbOperate::InternalSwap(Mydis_DbOperate* other) {
  std::swap(query_type_, other->query_type_);
  table_name_.Swap(&other->table_name_);
  fields_.UnsafeArenaSwap(&other->fields_);
  conditions_.UnsafeArenaSwap(&other->conditions_);
  groupby_col_.UnsafeArenaSwap(&other->groupby_col_);
  orderby_col_.UnsafeArenaSwap(&other->orderby_col_);
  std::swap(group_relation_, other->group_relation_);
  std::swap(limit_, other->limit_);
  std::swap(limit_from_, other->limit_from_);
  std::swap(mod_factor_, other->mod_factor_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Mydis_DbOperate::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Mydis_DbOperate_descriptor_;
  metadata.reflection = Mydis_DbOperate_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Mydis::kSectionFactorFieldNumber;
const int Mydis::kRedisOperateFieldNumber;
const int Mydis::kDbOperateFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Mydis::Mydis()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:neb.Mydis)
}

void Mydis::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  redis_operate_ = const_cast< ::neb::Mydis_RedisOperate*>(&::neb::Mydis_RedisOperate::default_instance());
  db_operate_ = const_cast< ::neb::Mydis_DbOperate*>(&::neb::Mydis_DbOperate::default_instance());
}

Mydis::Mydis(const Mydis& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:neb.Mydis)
}

void Mydis::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  section_factor_ = 0u;
  redis_operate_ = NULL;
  db_operate_ = NULL;
}

Mydis::~Mydis() {
  // @@protoc_insertion_point(destructor:neb.Mydis)
  SharedDtor();
}

void Mydis::SharedDtor() {
  if (this != default_instance_) {
    delete redis_operate_;
    delete db_operate_;
  }
}

void Mydis::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Mydis::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Mydis_descriptor_;
}

const Mydis& Mydis::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mydis_2eproto();
  return *default_instance_;
}

Mydis* Mydis::default_instance_ = NULL;

Mydis* Mydis::New(::google::protobuf::Arena* arena) const {
  Mydis* n = new Mydis;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Mydis::Clear() {
// @@protoc_insertion_point(message_clear_start:neb.Mydis)
  section_factor_ = 0u;
  if (GetArenaNoVirtual() == NULL && redis_operate_ != NULL) delete redis_operate_;
  redis_operate_ = NULL;
  if (GetArenaNoVirtual() == NULL && db_operate_ != NULL) delete db_operate_;
  db_operate_ = NULL;
}

bool Mydis::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:neb.Mydis)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 section_factor = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &section_factor_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_redis_operate;
        break;
      }

      // optional .neb.Mydis.RedisOperate redis_operate = 2;
      case 2: {
        if (tag == 18) {
         parse_redis_operate:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_redis_operate()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_db_operate;
        break;
      }

      // optional .neb.Mydis.DbOperate db_operate = 3;
      case 3: {
        if (tag == 26) {
         parse_db_operate:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_db_operate()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:neb.Mydis)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:neb.Mydis)
  return false;
#undef DO_
}

void Mydis::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:neb.Mydis)
  // optional uint32 section_factor = 1;
  if (this->section_factor() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->section_factor(), output);
  }

  // optional .neb.Mydis.RedisOperate redis_operate = 2;
  if (this->has_redis_operate()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->redis_operate_, output);
  }

  // optional .neb.Mydis.DbOperate db_operate = 3;
  if (this->has_db_operate()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->db_operate_, output);
  }

  // @@protoc_insertion_point(serialize_end:neb.Mydis)
}

::google::protobuf::uint8* Mydis::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:neb.Mydis)
  // optional uint32 section_factor = 1;
  if (this->section_factor() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->section_factor(), target);
  }

  // optional .neb.Mydis.RedisOperate redis_operate = 2;
  if (this->has_redis_operate()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->redis_operate_, false, target);
  }

  // optional .neb.Mydis.DbOperate db_operate = 3;
  if (this->has_db_operate()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->db_operate_, false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:neb.Mydis)
  return target;
}

int Mydis::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:neb.Mydis)
  int total_size = 0;

  // optional uint32 section_factor = 1;
  if (this->section_factor() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->section_factor());
  }

  // optional .neb.Mydis.RedisOperate redis_operate = 2;
  if (this->has_redis_operate()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->redis_operate_);
  }

  // optional .neb.Mydis.DbOperate db_operate = 3;
  if (this->has_db_operate()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->db_operate_);
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Mydis::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:neb.Mydis)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const Mydis* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Mydis>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:neb.Mydis)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:neb.Mydis)
    MergeFrom(*source);
  }
}

void Mydis::MergeFrom(const Mydis& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:neb.Mydis)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.section_factor() != 0) {
    set_section_factor(from.section_factor());
  }
  if (from.has_redis_operate()) {
    mutable_redis_operate()->::neb::Mydis_RedisOperate::MergeFrom(from.redis_operate());
  }
  if (from.has_db_operate()) {
    mutable_db_operate()->::neb::Mydis_DbOperate::MergeFrom(from.db_operate());
  }
}

void Mydis::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:neb.Mydis)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Mydis::CopyFrom(const Mydis& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:neb.Mydis)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Mydis::IsInitialized() const {

  return true;
}

void Mydis::Swap(Mydis* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Mydis::InternalSwap(Mydis* other) {
  std::swap(section_factor_, other->section_factor_);
  std::swap(redis_operate_, other->redis_operate_);
  std::swap(db_operate_, other->db_operate_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Mydis::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Mydis_descriptor_;
  metadata.reflection = Mydis_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Mydis_RedisOperate

// optional bytes key_name = 1;
void Mydis_RedisOperate::clear_key_name() {
  key_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& Mydis_RedisOperate::key_name() const {
  // @@protoc_insertion_point(field_get:neb.Mydis.RedisOperate.key_name)
  return key_name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Mydis_RedisOperate::set_key_name(const ::std::string& value) {
  
  key_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:neb.Mydis.RedisOperate.key_name)
}
 void Mydis_RedisOperate::set_key_name(const char* value) {
  
  key_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:neb.Mydis.RedisOperate.key_name)
}
 void Mydis_RedisOperate::set_key_name(const void* value, size_t size) {
  
  key_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:neb.Mydis.RedisOperate.key_name)
}
 ::std::string* Mydis_RedisOperate::mutable_key_name() {
  
  // @@protoc_insertion_point(field_mutable:neb.Mydis.RedisOperate.key_name)
  return key_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Mydis_RedisOperate::release_key_name() {
  // @@protoc_insertion_point(field_release:neb.Mydis.RedisOperate.key_name)
  
  return key_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Mydis_RedisOperate::set_allocated_key_name(::std::string* key_name) {
  if (key_name != NULL) {
    
  } else {
    
  }
  key_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), key_name);
  // @@protoc_insertion_point(field_set_allocated:neb.Mydis.RedisOperate.key_name)
}

// optional string redis_cmd_read = 2;
void Mydis_RedisOperate::clear_redis_cmd_read() {
  redis_cmd_read_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& Mydis_RedisOperate::redis_cmd_read() const {
  // @@protoc_insertion_point(field_get:neb.Mydis.RedisOperate.redis_cmd_read)
  return redis_cmd_read_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Mydis_RedisOperate::set_redis_cmd_read(const ::std::string& value) {
  
  redis_cmd_read_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:neb.Mydis.RedisOperate.redis_cmd_read)
}
 void Mydis_RedisOperate::set_redis_cmd_read(const char* value) {
  
  redis_cmd_read_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:neb.Mydis.RedisOperate.redis_cmd_read)
}
 void Mydis_RedisOperate::set_redis_cmd_read(const char* value, size_t size) {
  
  redis_cmd_read_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:neb.Mydis.RedisOperate.redis_cmd_read)
}
 ::std::string* Mydis_RedisOperate::mutable_redis_cmd_read() {
  
  // @@protoc_insertion_point(field_mutable:neb.Mydis.RedisOperate.redis_cmd_read)
  return redis_cmd_read_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Mydis_RedisOperate::release_redis_cmd_read() {
  // @@protoc_insertion_point(field_release:neb.Mydis.RedisOperate.redis_cmd_read)
  
  return redis_cmd_read_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Mydis_RedisOperate::set_allocated_redis_cmd_read(::std::string* redis_cmd_read) {
  if (redis_cmd_read != NULL) {
    
  } else {
    
  }
  redis_cmd_read_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), redis_cmd_read);
  // @@protoc_insertion_point(field_set_allocated:neb.Mydis.RedisOperate.redis_cmd_read)
}

// optional string redis_cmd_write = 3;
void Mydis_RedisOperate::clear_redis_cmd_write() {
  redis_cmd_write_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& Mydis_RedisOperate::redis_cmd_write() const {
  // @@protoc_insertion_point(field_get:neb.Mydis.RedisOperate.redis_cmd_write)
  return redis_cmd_write_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Mydis_RedisOperate::set_redis_cmd_write(const ::std::string& value) {
  
  redis_cmd_write_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:neb.Mydis.RedisOperate.redis_cmd_write)
}
 void Mydis_RedisOperate::set_redis_cmd_write(const char* value) {
  
  redis_cmd_write_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:neb.Mydis.RedisOperate.redis_cmd_write)
}
 void Mydis_RedisOperate::set_redis_cmd_write(const char* value, size_t size) {
  
  redis_cmd_write_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:neb.Mydis.RedisOperate.redis_cmd_write)
}
 ::std::string* Mydis_RedisOperate::mutable_redis_cmd_write() {
  
  // @@protoc_insertion_point(field_mutable:neb.Mydis.RedisOperate.redis_cmd_write)
  return redis_cmd_write_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Mydis_RedisOperate::release_redis_cmd_write() {
  // @@protoc_insertion_point(field_release:neb.Mydis.RedisOperate.redis_cmd_write)
  
  return redis_cmd_write_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Mydis_RedisOperate::set_allocated_redis_cmd_write(::std::string* redis_cmd_write) {
  if (redis_cmd_write != NULL) {
    
  } else {
    
  }
  redis_cmd_write_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), redis_cmd_write);
  // @@protoc_insertion_point(field_set_allocated:neb.Mydis.RedisOperate.redis_cmd_write)
}

// optional .neb.Mydis.RedisOperate.OPERATE_TYPE op_type = 4;
void Mydis_RedisOperate::clear_op_type() {
  op_type_ = 0;
}
 ::neb::Mydis_RedisOperate_OPERATE_TYPE Mydis_RedisOperate::op_type() const {
  // @@protoc_insertion_point(field_get:neb.Mydis.RedisOperate.op_type)
  return static_cast< ::neb::Mydis_RedisOperate_OPERATE_TYPE >(op_type_);
}
 void Mydis_RedisOperate::set_op_type(::neb::Mydis_RedisOperate_OPERATE_TYPE value) {
  
  op_type_ = value;
  // @@protoc_insertion_point(field_set:neb.Mydis.RedisOperate.op_type)
}

// repeated .neb.Field fields = 5;
int Mydis_RedisOperate::fields_size() const {
  return fields_.size();
}
void Mydis_RedisOperate::clear_fields() {
  fields_.Clear();
}
const ::neb::Field& Mydis_RedisOperate::fields(int index) const {
  // @@protoc_insertion_point(field_get:neb.Mydis.RedisOperate.fields)
  return fields_.Get(index);
}
::neb::Field* Mydis_RedisOperate::mutable_fields(int index) {
  // @@protoc_insertion_point(field_mutable:neb.Mydis.RedisOperate.fields)
  return fields_.Mutable(index);
}
::neb::Field* Mydis_RedisOperate::add_fields() {
  // @@protoc_insertion_point(field_add:neb.Mydis.RedisOperate.fields)
  return fields_.Add();
}
::google::protobuf::RepeatedPtrField< ::neb::Field >*
Mydis_RedisOperate::mutable_fields() {
  // @@protoc_insertion_point(field_mutable_list:neb.Mydis.RedisOperate.fields)
  return &fields_;
}
const ::google::protobuf::RepeatedPtrField< ::neb::Field >&
Mydis_RedisOperate::fields() const {
  // @@protoc_insertion_point(field_list:neb.Mydis.RedisOperate.fields)
  return fields_;
}

// optional int32 key_ttl = 6;
void Mydis_RedisOperate::clear_key_ttl() {
  key_ttl_ = 0;
}
 ::google::protobuf::int32 Mydis_RedisOperate::key_ttl() const {
  // @@protoc_insertion_point(field_get:neb.Mydis.RedisOperate.key_ttl)
  return key_ttl_;
}
 void Mydis_RedisOperate::set_key_ttl(::google::protobuf::int32 value) {
  
  key_ttl_ = value;
  // @@protoc_insertion_point(field_set:neb.Mydis.RedisOperate.key_ttl)
}

// optional int32 redis_structure = 7;
void Mydis_RedisOperate::clear_redis_structure() {
  redis_structure_ = 0;
}
 ::google::protobuf::int32 Mydis_RedisOperate::redis_structure() const {
  // @@protoc_insertion_point(field_get:neb.Mydis.RedisOperate.redis_structure)
  return redis_structure_;
}
 void Mydis_RedisOperate::set_redis_structure(::google::protobuf::int32 value) {
  
  redis_structure_ = value;
  // @@protoc_insertion_point(field_set:neb.Mydis.RedisOperate.redis_structure)
}

// optional int32 data_purpose = 8;
void Mydis_RedisOperate::clear_data_purpose() {
  data_purpose_ = 0;
}
 ::google::protobuf::int32 Mydis_RedisOperate::data_purpose() const {
  // @@protoc_insertion_point(field_get:neb.Mydis.RedisOperate.data_purpose)
  return data_purpose_;
}
 void Mydis_RedisOperate::set_data_purpose(::google::protobuf::int32 value) {
  
  data_purpose_ = value;
  // @@protoc_insertion_point(field_set:neb.Mydis.RedisOperate.data_purpose)
}

// optional bytes hash_key = 9;
void Mydis_RedisOperate::clear_hash_key() {
  hash_key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& Mydis_RedisOperate::hash_key() const {
  // @@protoc_insertion_point(field_get:neb.Mydis.RedisOperate.hash_key)
  return hash_key_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Mydis_RedisOperate::set_hash_key(const ::std::string& value) {
  
  hash_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:neb.Mydis.RedisOperate.hash_key)
}
 void Mydis_RedisOperate::set_hash_key(const char* value) {
  
  hash_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:neb.Mydis.RedisOperate.hash_key)
}
 void Mydis_RedisOperate::set_hash_key(const void* value, size_t size) {
  
  hash_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:neb.Mydis.RedisOperate.hash_key)
}
 ::std::string* Mydis_RedisOperate::mutable_hash_key() {
  
  // @@protoc_insertion_point(field_mutable:neb.Mydis.RedisOperate.hash_key)
  return hash_key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Mydis_RedisOperate::release_hash_key() {
  // @@protoc_insertion_point(field_release:neb.Mydis.RedisOperate.hash_key)
  
  return hash_key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Mydis_RedisOperate::set_allocated_hash_key(::std::string* hash_key) {
  if (hash_key != NULL) {
    
  } else {
    
  }
  hash_key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), hash_key);
  // @@protoc_insertion_point(field_set_allocated:neb.Mydis.RedisOperate.hash_key)
}

// -------------------------------------------------------------------

// Mydis_DbOperate_Condition

// optional .neb.Mydis.DbOperate.Condition.E_RELATION relation = 1;
void Mydis_DbOperate_Condition::clear_relation() {
  relation_ = 0;
}
 ::neb::Mydis_DbOperate_Condition_E_RELATION Mydis_DbOperate_Condition::relation() const {
  // @@protoc_insertion_point(field_get:neb.Mydis.DbOperate.Condition.relation)
  return static_cast< ::neb::Mydis_DbOperate_Condition_E_RELATION >(relation_);
}
 void Mydis_DbOperate_Condition::set_relation(::neb::Mydis_DbOperate_Condition_E_RELATION value) {
  
  relation_ = value;
  // @@protoc_insertion_point(field_set:neb.Mydis.DbOperate.Condition.relation)
}

// optional .neb.E_COL_TYPE col_type = 2;
void Mydis_DbOperate_Condition::clear_col_type() {
  col_type_ = 0;
}
 ::neb::E_COL_TYPE Mydis_DbOperate_Condition::col_type() const {
  // @@protoc_insertion_point(field_get:neb.Mydis.DbOperate.Condition.col_type)
  return static_cast< ::neb::E_COL_TYPE >(col_type_);
}
 void Mydis_DbOperate_Condition::set_col_type(::neb::E_COL_TYPE value) {
  
  col_type_ = value;
  // @@protoc_insertion_point(field_set:neb.Mydis.DbOperate.Condition.col_type)
}

// optional string col_name = 3;
void Mydis_DbOperate_Condition::clear_col_name() {
  col_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& Mydis_DbOperate_Condition::col_name() const {
  // @@protoc_insertion_point(field_get:neb.Mydis.DbOperate.Condition.col_name)
  return col_name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Mydis_DbOperate_Condition::set_col_name(const ::std::string& value) {
  
  col_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:neb.Mydis.DbOperate.Condition.col_name)
}
 void Mydis_DbOperate_Condition::set_col_name(const char* value) {
  
  col_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:neb.Mydis.DbOperate.Condition.col_name)
}
 void Mydis_DbOperate_Condition::set_col_name(const char* value, size_t size) {
  
  col_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:neb.Mydis.DbOperate.Condition.col_name)
}
 ::std::string* Mydis_DbOperate_Condition::mutable_col_name() {
  
  // @@protoc_insertion_point(field_mutable:neb.Mydis.DbOperate.Condition.col_name)
  return col_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Mydis_DbOperate_Condition::release_col_name() {
  // @@protoc_insertion_point(field_release:neb.Mydis.DbOperate.Condition.col_name)
  
  return col_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Mydis_DbOperate_Condition::set_allocated_col_name(::std::string* col_name) {
  if (col_name != NULL) {
    
  } else {
    
  }
  col_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), col_name);
  // @@protoc_insertion_point(field_set_allocated:neb.Mydis.DbOperate.Condition.col_name)
}

// repeated bytes col_values = 4;
int Mydis_DbOperate_Condition::col_values_size() const {
  return col_values_.size();
}
void Mydis_DbOperate_Condition::clear_col_values() {
  col_values_.Clear();
}
 const ::std::string& Mydis_DbOperate_Condition::col_values(int index) const {
  // @@protoc_insertion_point(field_get:neb.Mydis.DbOperate.Condition.col_values)
  return col_values_.Get(index);
}
 ::std::string* Mydis_DbOperate_Condition::mutable_col_values(int index) {
  // @@protoc_insertion_point(field_mutable:neb.Mydis.DbOperate.Condition.col_values)
  return col_values_.Mutable(index);
}
 void Mydis_DbOperate_Condition::set_col_values(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:neb.Mydis.DbOperate.Condition.col_values)
  col_values_.Mutable(index)->assign(value);
}
 void Mydis_DbOperate_Condition::set_col_values(int index, const char* value) {
  col_values_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:neb.Mydis.DbOperate.Condition.col_values)
}
 void Mydis_DbOperate_Condition::set_col_values(int index, const void* value, size_t size) {
  col_values_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:neb.Mydis.DbOperate.Condition.col_values)
}
 ::std::string* Mydis_DbOperate_Condition::add_col_values() {
  // @@protoc_insertion_point(field_add_mutable:neb.Mydis.DbOperate.Condition.col_values)
  return col_values_.Add();
}
 void Mydis_DbOperate_Condition::add_col_values(const ::std::string& value) {
  col_values_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:neb.Mydis.DbOperate.Condition.col_values)
}
 void Mydis_DbOperate_Condition::add_col_values(const char* value) {
  col_values_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:neb.Mydis.DbOperate.Condition.col_values)
}
 void Mydis_DbOperate_Condition::add_col_values(const void* value, size_t size) {
  col_values_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:neb.Mydis.DbOperate.Condition.col_values)
}
 const ::google::protobuf::RepeatedPtrField< ::std::string>&
Mydis_DbOperate_Condition::col_values() const {
  // @@protoc_insertion_point(field_list:neb.Mydis.DbOperate.Condition.col_values)
  return col_values_;
}
 ::google::protobuf::RepeatedPtrField< ::std::string>*
Mydis_DbOperate_Condition::mutable_col_values() {
  // @@protoc_insertion_point(field_mutable_list:neb.Mydis.DbOperate.Condition.col_values)
  return &col_values_;
}

// optional string col_name_right = 5;
void Mydis_DbOperate_Condition::clear_col_name_right() {
  col_name_right_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& Mydis_DbOperate_Condition::col_name_right() const {
  // @@protoc_insertion_point(field_get:neb.Mydis.DbOperate.Condition.col_name_right)
  return col_name_right_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Mydis_DbOperate_Condition::set_col_name_right(const ::std::string& value) {
  
  col_name_right_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:neb.Mydis.DbOperate.Condition.col_name_right)
}
 void Mydis_DbOperate_Condition::set_col_name_right(const char* value) {
  
  col_name_right_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:neb.Mydis.DbOperate.Condition.col_name_right)
}
 void Mydis_DbOperate_Condition::set_col_name_right(const char* value, size_t size) {
  
  col_name_right_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:neb.Mydis.DbOperate.Condition.col_name_right)
}
 ::std::string* Mydis_DbOperate_Condition::mutable_col_name_right() {
  
  // @@protoc_insertion_point(field_mutable:neb.Mydis.DbOperate.Condition.col_name_right)
  return col_name_right_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Mydis_DbOperate_Condition::release_col_name_right() {
  // @@protoc_insertion_point(field_release:neb.Mydis.DbOperate.Condition.col_name_right)
  
  return col_name_right_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Mydis_DbOperate_Condition::set_allocated_col_name_right(::std::string* col_name_right) {
  if (col_name_right != NULL) {
    
  } else {
    
  }
  col_name_right_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), col_name_right);
  // @@protoc_insertion_point(field_set_allocated:neb.Mydis.DbOperate.Condition.col_name_right)
}

// -------------------------------------------------------------------

// Mydis_DbOperate_ConditionGroup

// optional .neb.Mydis.DbOperate.ConditionGroup.E_RELATION relation = 1;
void Mydis_DbOperate_ConditionGroup::clear_relation() {
  relation_ = 0;
}
 ::neb::Mydis_DbOperate_ConditionGroup_E_RELATION Mydis_DbOperate_ConditionGroup::relation() const {
  // @@protoc_insertion_point(field_get:neb.Mydis.DbOperate.ConditionGroup.relation)
  return static_cast< ::neb::Mydis_DbOperate_ConditionGroup_E_RELATION >(relation_);
}
 void Mydis_DbOperate_ConditionGroup::set_relation(::neb::Mydis_DbOperate_ConditionGroup_E_RELATION value) {
  
  relation_ = value;
  // @@protoc_insertion_point(field_set:neb.Mydis.DbOperate.ConditionGroup.relation)
}

// repeated .neb.Mydis.DbOperate.Condition condition = 2;
int Mydis_DbOperate_ConditionGroup::condition_size() const {
  return condition_.size();
}
void Mydis_DbOperate_ConditionGroup::clear_condition() {
  condition_.Clear();
}
const ::neb::Mydis_DbOperate_Condition& Mydis_DbOperate_ConditionGroup::condition(int index) const {
  // @@protoc_insertion_point(field_get:neb.Mydis.DbOperate.ConditionGroup.condition)
  return condition_.Get(index);
}
::neb::Mydis_DbOperate_Condition* Mydis_DbOperate_ConditionGroup::mutable_condition(int index) {
  // @@protoc_insertion_point(field_mutable:neb.Mydis.DbOperate.ConditionGroup.condition)
  return condition_.Mutable(index);
}
::neb::Mydis_DbOperate_Condition* Mydis_DbOperate_ConditionGroup::add_condition() {
  // @@protoc_insertion_point(field_add:neb.Mydis.DbOperate.ConditionGroup.condition)
  return condition_.Add();
}
::google::protobuf::RepeatedPtrField< ::neb::Mydis_DbOperate_Condition >*
Mydis_DbOperate_ConditionGroup::mutable_condition() {
  // @@protoc_insertion_point(field_mutable_list:neb.Mydis.DbOperate.ConditionGroup.condition)
  return &condition_;
}
const ::google::protobuf::RepeatedPtrField< ::neb::Mydis_DbOperate_Condition >&
Mydis_DbOperate_ConditionGroup::condition() const {
  // @@protoc_insertion_point(field_list:neb.Mydis.DbOperate.ConditionGroup.condition)
  return condition_;
}

// -------------------------------------------------------------------

// Mydis_DbOperate_OrderBy

// optional .neb.Mydis.DbOperate.OrderBy.E_RELATION relation = 1;
void Mydis_DbOperate_OrderBy::clear_relation() {
  relation_ = 0;
}
 ::neb::Mydis_DbOperate_OrderBy_E_RELATION Mydis_DbOperate_OrderBy::relation() const {
  // @@protoc_insertion_point(field_get:neb.Mydis.DbOperate.OrderBy.relation)
  return static_cast< ::neb::Mydis_DbOperate_OrderBy_E_RELATION >(relation_);
}
 void Mydis_DbOperate_OrderBy::set_relation(::neb::Mydis_DbOperate_OrderBy_E_RELATION value) {
  
  relation_ = value;
  // @@protoc_insertion_point(field_set:neb.Mydis.DbOperate.OrderBy.relation)
}

// optional string col_name = 2;
void Mydis_DbOperate_OrderBy::clear_col_name() {
  col_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& Mydis_DbOperate_OrderBy::col_name() const {
  // @@protoc_insertion_point(field_get:neb.Mydis.DbOperate.OrderBy.col_name)
  return col_name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Mydis_DbOperate_OrderBy::set_col_name(const ::std::string& value) {
  
  col_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:neb.Mydis.DbOperate.OrderBy.col_name)
}
 void Mydis_DbOperate_OrderBy::set_col_name(const char* value) {
  
  col_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:neb.Mydis.DbOperate.OrderBy.col_name)
}
 void Mydis_DbOperate_OrderBy::set_col_name(const char* value, size_t size) {
  
  col_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:neb.Mydis.DbOperate.OrderBy.col_name)
}
 ::std::string* Mydis_DbOperate_OrderBy::mutable_col_name() {
  
  // @@protoc_insertion_point(field_mutable:neb.Mydis.DbOperate.OrderBy.col_name)
  return col_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Mydis_DbOperate_OrderBy::release_col_name() {
  // @@protoc_insertion_point(field_release:neb.Mydis.DbOperate.OrderBy.col_name)
  
  return col_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Mydis_DbOperate_OrderBy::set_allocated_col_name(::std::string* col_name) {
  if (col_name != NULL) {
    
  } else {
    
  }
  col_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), col_name);
  // @@protoc_insertion_point(field_set_allocated:neb.Mydis.DbOperate.OrderBy.col_name)
}

// -------------------------------------------------------------------

// Mydis_DbOperate

// optional .neb.Mydis.DbOperate.E_QUERY_TYPE query_type = 1;
void Mydis_DbOperate::clear_query_type() {
  query_type_ = 0;
}
 ::neb::Mydis_DbOperate_E_QUERY_TYPE Mydis_DbOperate::query_type() const {
  // @@protoc_insertion_point(field_get:neb.Mydis.DbOperate.query_type)
  return static_cast< ::neb::Mydis_DbOperate_E_QUERY_TYPE >(query_type_);
}
 void Mydis_DbOperate::set_query_type(::neb::Mydis_DbOperate_E_QUERY_TYPE value) {
  
  query_type_ = value;
  // @@protoc_insertion_point(field_set:neb.Mydis.DbOperate.query_type)
}

// optional string table_name = 2;
void Mydis_DbOperate::clear_table_name() {
  table_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& Mydis_DbOperate::table_name() const {
  // @@protoc_insertion_point(field_get:neb.Mydis.DbOperate.table_name)
  return table_name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Mydis_DbOperate::set_table_name(const ::std::string& value) {
  
  table_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:neb.Mydis.DbOperate.table_name)
}
 void Mydis_DbOperate::set_table_name(const char* value) {
  
  table_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:neb.Mydis.DbOperate.table_name)
}
 void Mydis_DbOperate::set_table_name(const char* value, size_t size) {
  
  table_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:neb.Mydis.DbOperate.table_name)
}
 ::std::string* Mydis_DbOperate::mutable_table_name() {
  
  // @@protoc_insertion_point(field_mutable:neb.Mydis.DbOperate.table_name)
  return table_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Mydis_DbOperate::release_table_name() {
  // @@protoc_insertion_point(field_release:neb.Mydis.DbOperate.table_name)
  
  return table_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Mydis_DbOperate::set_allocated_table_name(::std::string* table_name) {
  if (table_name != NULL) {
    
  } else {
    
  }
  table_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), table_name);
  // @@protoc_insertion_point(field_set_allocated:neb.Mydis.DbOperate.table_name)
}

// repeated .neb.Field fields = 3;
int Mydis_DbOperate::fields_size() const {
  return fields_.size();
}
void Mydis_DbOperate::clear_fields() {
  fields_.Clear();
}
const ::neb::Field& Mydis_DbOperate::fields(int index) const {
  // @@protoc_insertion_point(field_get:neb.Mydis.DbOperate.fields)
  return fields_.Get(index);
}
::neb::Field* Mydis_DbOperate::mutable_fields(int index) {
  // @@protoc_insertion_point(field_mutable:neb.Mydis.DbOperate.fields)
  return fields_.Mutable(index);
}
::neb::Field* Mydis_DbOperate::add_fields() {
  // @@protoc_insertion_point(field_add:neb.Mydis.DbOperate.fields)
  return fields_.Add();
}
::google::protobuf::RepeatedPtrField< ::neb::Field >*
Mydis_DbOperate::mutable_fields() {
  // @@protoc_insertion_point(field_mutable_list:neb.Mydis.DbOperate.fields)
  return &fields_;
}
const ::google::protobuf::RepeatedPtrField< ::neb::Field >&
Mydis_DbOperate::fields() const {
  // @@protoc_insertion_point(field_list:neb.Mydis.DbOperate.fields)
  return fields_;
}

// repeated .neb.Mydis.DbOperate.ConditionGroup conditions = 4;
int Mydis_DbOperate::conditions_size() const {
  return conditions_.size();
}
void Mydis_DbOperate::clear_conditions() {
  conditions_.Clear();
}
const ::neb::Mydis_DbOperate_ConditionGroup& Mydis_DbOperate::conditions(int index) const {
  // @@protoc_insertion_point(field_get:neb.Mydis.DbOperate.conditions)
  return conditions_.Get(index);
}
::neb::Mydis_DbOperate_ConditionGroup* Mydis_DbOperate::mutable_conditions(int index) {
  // @@protoc_insertion_point(field_mutable:neb.Mydis.DbOperate.conditions)
  return conditions_.Mutable(index);
}
::neb::Mydis_DbOperate_ConditionGroup* Mydis_DbOperate::add_conditions() {
  // @@protoc_insertion_point(field_add:neb.Mydis.DbOperate.conditions)
  return conditions_.Add();
}
::google::protobuf::RepeatedPtrField< ::neb::Mydis_DbOperate_ConditionGroup >*
Mydis_DbOperate::mutable_conditions() {
  // @@protoc_insertion_point(field_mutable_list:neb.Mydis.DbOperate.conditions)
  return &conditions_;
}
const ::google::protobuf::RepeatedPtrField< ::neb::Mydis_DbOperate_ConditionGroup >&
Mydis_DbOperate::conditions() const {
  // @@protoc_insertion_point(field_list:neb.Mydis.DbOperate.conditions)
  return conditions_;
}

// repeated string groupby_col = 5;
int Mydis_DbOperate::groupby_col_size() const {
  return groupby_col_.size();
}
void Mydis_DbOperate::clear_groupby_col() {
  groupby_col_.Clear();
}
 const ::std::string& Mydis_DbOperate::groupby_col(int index) const {
  // @@protoc_insertion_point(field_get:neb.Mydis.DbOperate.groupby_col)
  return groupby_col_.Get(index);
}
 ::std::string* Mydis_DbOperate::mutable_groupby_col(int index) {
  // @@protoc_insertion_point(field_mutable:neb.Mydis.DbOperate.groupby_col)
  return groupby_col_.Mutable(index);
}
 void Mydis_DbOperate::set_groupby_col(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:neb.Mydis.DbOperate.groupby_col)
  groupby_col_.Mutable(index)->assign(value);
}
 void Mydis_DbOperate::set_groupby_col(int index, const char* value) {
  groupby_col_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:neb.Mydis.DbOperate.groupby_col)
}
 void Mydis_DbOperate::set_groupby_col(int index, const char* value, size_t size) {
  groupby_col_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:neb.Mydis.DbOperate.groupby_col)
}
 ::std::string* Mydis_DbOperate::add_groupby_col() {
  // @@protoc_insertion_point(field_add_mutable:neb.Mydis.DbOperate.groupby_col)
  return groupby_col_.Add();
}
 void Mydis_DbOperate::add_groupby_col(const ::std::string& value) {
  groupby_col_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:neb.Mydis.DbOperate.groupby_col)
}
 void Mydis_DbOperate::add_groupby_col(const char* value) {
  groupby_col_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:neb.Mydis.DbOperate.groupby_col)
}
 void Mydis_DbOperate::add_groupby_col(const char* value, size_t size) {
  groupby_col_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:neb.Mydis.DbOperate.groupby_col)
}
 const ::google::protobuf::RepeatedPtrField< ::std::string>&
Mydis_DbOperate::groupby_col() const {
  // @@protoc_insertion_point(field_list:neb.Mydis.DbOperate.groupby_col)
  return groupby_col_;
}
 ::google::protobuf::RepeatedPtrField< ::std::string>*
Mydis_DbOperate::mutable_groupby_col() {
  // @@protoc_insertion_point(field_mutable_list:neb.Mydis.DbOperate.groupby_col)
  return &groupby_col_;
}

// repeated .neb.Mydis.DbOperate.OrderBy orderby_col = 6;
int Mydis_DbOperate::orderby_col_size() const {
  return orderby_col_.size();
}
void Mydis_DbOperate::clear_orderby_col() {
  orderby_col_.Clear();
}
const ::neb::Mydis_DbOperate_OrderBy& Mydis_DbOperate::orderby_col(int index) const {
  // @@protoc_insertion_point(field_get:neb.Mydis.DbOperate.orderby_col)
  return orderby_col_.Get(index);
}
::neb::Mydis_DbOperate_OrderBy* Mydis_DbOperate::mutable_orderby_col(int index) {
  // @@protoc_insertion_point(field_mutable:neb.Mydis.DbOperate.orderby_col)
  return orderby_col_.Mutable(index);
}
::neb::Mydis_DbOperate_OrderBy* Mydis_DbOperate::add_orderby_col() {
  // @@protoc_insertion_point(field_add:neb.Mydis.DbOperate.orderby_col)
  return orderby_col_.Add();
}
::google::protobuf::RepeatedPtrField< ::neb::Mydis_DbOperate_OrderBy >*
Mydis_DbOperate::mutable_orderby_col() {
  // @@protoc_insertion_point(field_mutable_list:neb.Mydis.DbOperate.orderby_col)
  return &orderby_col_;
}
const ::google::protobuf::RepeatedPtrField< ::neb::Mydis_DbOperate_OrderBy >&
Mydis_DbOperate::orderby_col() const {
  // @@protoc_insertion_point(field_list:neb.Mydis.DbOperate.orderby_col)
  return orderby_col_;
}

// optional .neb.Mydis.DbOperate.ConditionGroup.E_RELATION group_relation = 7;
void Mydis_DbOperate::clear_group_relation() {
  group_relation_ = 0;
}
 ::neb::Mydis_DbOperate_ConditionGroup_E_RELATION Mydis_DbOperate::group_relation() const {
  // @@protoc_insertion_point(field_get:neb.Mydis.DbOperate.group_relation)
  return static_cast< ::neb::Mydis_DbOperate_ConditionGroup_E_RELATION >(group_relation_);
}
 void Mydis_DbOperate::set_group_relation(::neb::Mydis_DbOperate_ConditionGroup_E_RELATION value) {
  
  group_relation_ = value;
  // @@protoc_insertion_point(field_set:neb.Mydis.DbOperate.group_relation)
}

// optional uint32 limit = 8;
void Mydis_DbOperate::clear_limit() {
  limit_ = 0u;
}
 ::google::protobuf::uint32 Mydis_DbOperate::limit() const {
  // @@protoc_insertion_point(field_get:neb.Mydis.DbOperate.limit)
  return limit_;
}
 void Mydis_DbOperate::set_limit(::google::protobuf::uint32 value) {
  
  limit_ = value;
  // @@protoc_insertion_point(field_set:neb.Mydis.DbOperate.limit)
}

// optional uint32 limit_from = 9;
void Mydis_DbOperate::clear_limit_from() {
  limit_from_ = 0u;
}
 ::google::protobuf::uint32 Mydis_DbOperate::limit_from() const {
  // @@protoc_insertion_point(field_get:neb.Mydis.DbOperate.limit_from)
  return limit_from_;
}
 void Mydis_DbOperate::set_limit_from(::google::protobuf::uint32 value) {
  
  limit_from_ = value;
  // @@protoc_insertion_point(field_set:neb.Mydis.DbOperate.limit_from)
}

// optional uint32 mod_factor = 10;
void Mydis_DbOperate::clear_mod_factor() {
  mod_factor_ = 0u;
}
 ::google::protobuf::uint32 Mydis_DbOperate::mod_factor() const {
  // @@protoc_insertion_point(field_get:neb.Mydis.DbOperate.mod_factor)
  return mod_factor_;
}
 void Mydis_DbOperate::set_mod_factor(::google::protobuf::uint32 value) {
  
  mod_factor_ = value;
  // @@protoc_insertion_point(field_set:neb.Mydis.DbOperate.mod_factor)
}

// -------------------------------------------------------------------

// Mydis

// optional uint32 section_factor = 1;
void Mydis::clear_section_factor() {
  section_factor_ = 0u;
}
 ::google::protobuf::uint32 Mydis::section_factor() const {
  // @@protoc_insertion_point(field_get:neb.Mydis.section_factor)
  return section_factor_;
}
 void Mydis::set_section_factor(::google::protobuf::uint32 value) {
  
  section_factor_ = value;
  // @@protoc_insertion_point(field_set:neb.Mydis.section_factor)
}

// optional .neb.Mydis.RedisOperate redis_operate = 2;
bool Mydis::has_redis_operate() const {
  return !_is_default_instance_ && redis_operate_ != NULL;
}
void Mydis::clear_redis_operate() {
  if (GetArenaNoVirtual() == NULL && redis_operate_ != NULL) delete redis_operate_;
  redis_operate_ = NULL;
}
const ::neb::Mydis_RedisOperate& Mydis::redis_operate() const {
  // @@protoc_insertion_point(field_get:neb.Mydis.redis_operate)
  return redis_operate_ != NULL ? *redis_operate_ : *default_instance_->redis_operate_;
}
::neb::Mydis_RedisOperate* Mydis::mutable_redis_operate() {
  
  if (redis_operate_ == NULL) {
    redis_operate_ = new ::neb::Mydis_RedisOperate;
  }
  // @@protoc_insertion_point(field_mutable:neb.Mydis.redis_operate)
  return redis_operate_;
}
::neb::Mydis_RedisOperate* Mydis::release_redis_operate() {
  // @@protoc_insertion_point(field_release:neb.Mydis.redis_operate)
  
  ::neb::Mydis_RedisOperate* temp = redis_operate_;
  redis_operate_ = NULL;
  return temp;
}
void Mydis::set_allocated_redis_operate(::neb::Mydis_RedisOperate* redis_operate) {
  delete redis_operate_;
  redis_operate_ = redis_operate;
  if (redis_operate) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:neb.Mydis.redis_operate)
}

// optional .neb.Mydis.DbOperate db_operate = 3;
bool Mydis::has_db_operate() const {
  return !_is_default_instance_ && db_operate_ != NULL;
}
void Mydis::clear_db_operate() {
  if (GetArenaNoVirtual() == NULL && db_operate_ != NULL) delete db_operate_;
  db_operate_ = NULL;
}
const ::neb::Mydis_DbOperate& Mydis::db_operate() const {
  // @@protoc_insertion_point(field_get:neb.Mydis.db_operate)
  return db_operate_ != NULL ? *db_operate_ : *default_instance_->db_operate_;
}
::neb::Mydis_DbOperate* Mydis::mutable_db_operate() {
  
  if (db_operate_ == NULL) {
    db_operate_ = new ::neb::Mydis_DbOperate;
  }
  // @@protoc_insertion_point(field_mutable:neb.Mydis.db_operate)
  return db_operate_;
}
::neb::Mydis_DbOperate* Mydis::release_db_operate() {
  // @@protoc_insertion_point(field_release:neb.Mydis.db_operate)
  
  ::neb::Mydis_DbOperate* temp = db_operate_;
  db_operate_ = NULL;
  return temp;
}
void Mydis::set_allocated_db_operate(::neb::Mydis_DbOperate* db_operate) {
  delete db_operate_;
  db_operate_ = db_operate;
  if (db_operate) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:neb.Mydis.db_operate)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Record::kFieldInfoFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Record::Record()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:neb.Record)
}

void Record::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

Record::Record(const Record& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:neb.Record)
}

void Record::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
}

Record::~Record() {
  // @@protoc_insertion_point(destructor:neb.Record)
  SharedDtor();
}

void Record::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Record::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Record::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Record_descriptor_;
}

const Record& Record::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mydis_2eproto();
  return *default_instance_;
}

Record* Record::default_instance_ = NULL;

Record* Record::New(::google::protobuf::Arena* arena) const {
  Record* n = new Record;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Record::Clear() {
// @@protoc_insertion_point(message_clear_start:neb.Record)
  field_info_.Clear();
}

bool Record::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:neb.Record)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .neb.Field field_info = 1;
      case 1: {
        if (tag == 10) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_field_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_field_info()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_loop_field_info;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:neb.Record)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:neb.Record)
  return false;
#undef DO_
}

void Record::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:neb.Record)
  // repeated .neb.Field field_info = 1;
  for (unsigned int i = 0, n = this->field_info_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->field_info(i), output);
  }

  // @@protoc_insertion_point(serialize_end:neb.Record)
}

::google::protobuf::uint8* Record::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:neb.Record)
  // repeated .neb.Field field_info = 1;
  for (unsigned int i = 0, n = this->field_info_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->field_info(i), false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:neb.Record)
  return target;
}

int Record::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:neb.Record)
  int total_size = 0;

  // repeated .neb.Field field_info = 1;
  total_size += 1 * this->field_info_size();
  for (int i = 0; i < this->field_info_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->field_info(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Record::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:neb.Record)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const Record* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Record>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:neb.Record)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:neb.Record)
    MergeFrom(*source);
  }
}

void Record::MergeFrom(const Record& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:neb.Record)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  field_info_.MergeFrom(from.field_info_);
}

void Record::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:neb.Record)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Record::CopyFrom(const Record& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:neb.Record)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Record::IsInitialized() const {

  return true;
}

void Record::Swap(Record* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Record::InternalSwap(Record* other) {
  field_info_.UnsafeArenaSwap(&other->field_info_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Record::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Record_descriptor_;
  metadata.reflection = Record_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Record

// repeated .neb.Field field_info = 1;
int Record::field_info_size() const {
  return field_info_.size();
}
void Record::clear_field_info() {
  field_info_.Clear();
}
const ::neb::Field& Record::field_info(int index) const {
  // @@protoc_insertion_point(field_get:neb.Record.field_info)
  return field_info_.Get(index);
}
::neb::Field* Record::mutable_field_info(int index) {
  // @@protoc_insertion_point(field_mutable:neb.Record.field_info)
  return field_info_.Mutable(index);
}
::neb::Field* Record::add_field_info() {
  // @@protoc_insertion_point(field_add:neb.Record.field_info)
  return field_info_.Add();
}
::google::protobuf::RepeatedPtrField< ::neb::Field >*
Record::mutable_field_info() {
  // @@protoc_insertion_point(field_mutable_list:neb.Record.field_info)
  return &field_info_;
}
const ::google::protobuf::RepeatedPtrField< ::neb::Field >&
Record::field_info() const {
  // @@protoc_insertion_point(field_list:neb.Record.field_info)
  return field_info_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Field::kColNameFieldNumber;
const int Field::kColTypeFieldNumber;
const int Field::kColValueFieldNumber;
const int Field::kColAsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Field::Field()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:neb.Field)
}

void Field::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

Field::Field(const Field& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:neb.Field)
}

void Field::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  col_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  col_type_ = 0;
  col_value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  col_as_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

Field::~Field() {
  // @@protoc_insertion_point(destructor:neb.Field)
  SharedDtor();
}

void Field::SharedDtor() {
  col_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  col_value_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  col_as_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void Field::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Field::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Field_descriptor_;
}

const Field& Field::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mydis_2eproto();
  return *default_instance_;
}

Field* Field::default_instance_ = NULL;

Field* Field::New(::google::protobuf::Arena* arena) const {
  Field* n = new Field;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Field::Clear() {
// @@protoc_insertion_point(message_clear_start:neb.Field)
  col_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  col_type_ = 0;
  col_value_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  col_as_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool Field::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:neb.Field)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string col_name = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_col_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->col_name().data(), this->col_name().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "neb.Field.col_name"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_col_type;
        break;
      }

      // optional .neb.E_COL_TYPE col_type = 2;
      case 2: {
        if (tag == 16) {
         parse_col_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_col_type(static_cast< ::neb::E_COL_TYPE >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_col_value;
        break;
      }

      // optional bytes col_value = 3;
      case 3: {
        if (tag == 26) {
         parse_col_value:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_col_value()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_col_as;
        break;
      }

      // optional string col_as = 4;
      case 4: {
        if (tag == 34) {
         parse_col_as:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_col_as()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->col_as().data(), this->col_as().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "neb.Field.col_as"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:neb.Field)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:neb.Field)
  return false;
#undef DO_
}

void Field::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:neb.Field)
  // optional string col_name = 1;
  if (this->col_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->col_name().data(), this->col_name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "neb.Field.col_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->col_name(), output);
  }

  // optional .neb.E_COL_TYPE col_type = 2;
  if (this->col_type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->col_type(), output);
  }

  // optional bytes col_value = 3;
  if (this->col_value().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->col_value(), output);
  }

  // optional string col_as = 4;
  if (this->col_as().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->col_as().data(), this->col_as().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "neb.Field.col_as");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->col_as(), output);
  }

  // @@protoc_insertion_point(serialize_end:neb.Field)
}

::google::protobuf::uint8* Field::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:neb.Field)
  // optional string col_name = 1;
  if (this->col_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->col_name().data(), this->col_name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "neb.Field.col_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->col_name(), target);
  }

  // optional .neb.E_COL_TYPE col_type = 2;
  if (this->col_type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->col_type(), target);
  }

  // optional bytes col_value = 3;
  if (this->col_value().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->col_value(), target);
  }

  // optional string col_as = 4;
  if (this->col_as().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->col_as().data(), this->col_as().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "neb.Field.col_as");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->col_as(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:neb.Field)
  return target;
}

int Field::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:neb.Field)
  int total_size = 0;

  // optional string col_name = 1;
  if (this->col_name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->col_name());
  }

  // optional .neb.E_COL_TYPE col_type = 2;
  if (this->col_type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->col_type());
  }

  // optional bytes col_value = 3;
  if (this->col_value().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->col_value());
  }

  // optional string col_as = 4;
  if (this->col_as().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->col_as());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Field::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:neb.Field)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const Field* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Field>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:neb.Field)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:neb.Field)
    MergeFrom(*source);
  }
}

void Field::MergeFrom(const Field& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:neb.Field)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.col_name().size() > 0) {

    col_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.col_name_);
  }
  if (from.col_type() != 0) {
    set_col_type(from.col_type());
  }
  if (from.col_value().size() > 0) {

    col_value_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.col_value_);
  }
  if (from.col_as().size() > 0) {

    col_as_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.col_as_);
  }
}

void Field::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:neb.Field)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Field::CopyFrom(const Field& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:neb.Field)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Field::IsInitialized() const {

  return true;
}

void Field::Swap(Field* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Field::InternalSwap(Field* other) {
  col_name_.Swap(&other->col_name_);
  std::swap(col_type_, other->col_type_);
  col_value_.Swap(&other->col_value_);
  col_as_.Swap(&other->col_as_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Field::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Field_descriptor_;
  metadata.reflection = Field_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Field

// optional string col_name = 1;
void Field::clear_col_name() {
  col_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& Field::col_name() const {
  // @@protoc_insertion_point(field_get:neb.Field.col_name)
  return col_name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Field::set_col_name(const ::std::string& value) {
  
  col_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:neb.Field.col_name)
}
 void Field::set_col_name(const char* value) {
  
  col_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:neb.Field.col_name)
}
 void Field::set_col_name(const char* value, size_t size) {
  
  col_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:neb.Field.col_name)
}
 ::std::string* Field::mutable_col_name() {
  
  // @@protoc_insertion_point(field_mutable:neb.Field.col_name)
  return col_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Field::release_col_name() {
  // @@protoc_insertion_point(field_release:neb.Field.col_name)
  
  return col_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Field::set_allocated_col_name(::std::string* col_name) {
  if (col_name != NULL) {
    
  } else {
    
  }
  col_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), col_name);
  // @@protoc_insertion_point(field_set_allocated:neb.Field.col_name)
}

// optional .neb.E_COL_TYPE col_type = 2;
void Field::clear_col_type() {
  col_type_ = 0;
}
 ::neb::E_COL_TYPE Field::col_type() const {
  // @@protoc_insertion_point(field_get:neb.Field.col_type)
  return static_cast< ::neb::E_COL_TYPE >(col_type_);
}
 void Field::set_col_type(::neb::E_COL_TYPE value) {
  
  col_type_ = value;
  // @@protoc_insertion_point(field_set:neb.Field.col_type)
}

// optional bytes col_value = 3;
void Field::clear_col_value() {
  col_value_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& Field::col_value() const {
  // @@protoc_insertion_point(field_get:neb.Field.col_value)
  return col_value_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Field::set_col_value(const ::std::string& value) {
  
  col_value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:neb.Field.col_value)
}
 void Field::set_col_value(const char* value) {
  
  col_value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:neb.Field.col_value)
}
 void Field::set_col_value(const void* value, size_t size) {
  
  col_value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:neb.Field.col_value)
}
 ::std::string* Field::mutable_col_value() {
  
  // @@protoc_insertion_point(field_mutable:neb.Field.col_value)
  return col_value_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Field::release_col_value() {
  // @@protoc_insertion_point(field_release:neb.Field.col_value)
  
  return col_value_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Field::set_allocated_col_value(::std::string* col_value) {
  if (col_value != NULL) {
    
  } else {
    
  }
  col_value_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), col_value);
  // @@protoc_insertion_point(field_set_allocated:neb.Field.col_value)
}

// optional string col_as = 4;
void Field::clear_col_as() {
  col_as_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& Field::col_as() const {
  // @@protoc_insertion_point(field_get:neb.Field.col_as)
  return col_as_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Field::set_col_as(const ::std::string& value) {
  
  col_as_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:neb.Field.col_as)
}
 void Field::set_col_as(const char* value) {
  
  col_as_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:neb.Field.col_as)
}
 void Field::set_col_as(const char* value, size_t size) {
  
  col_as_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:neb.Field.col_as)
}
 ::std::string* Field::mutable_col_as() {
  
  // @@protoc_insertion_point(field_mutable:neb.Field.col_as)
  return col_as_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Field::release_col_as() {
  // @@protoc_insertion_point(field_release:neb.Field.col_as)
  
  return col_as_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Field::set_allocated_col_as(::std::string* col_as) {
  if (col_as != NULL) {
    
  } else {
    
  }
  col_as_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), col_as);
  // @@protoc_insertion_point(field_set_allocated:neb.Field.col_as)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

const ::google::protobuf::EnumDescriptor* Result_E_RESULT_FROM_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Result_E_RESULT_FROM_descriptor_;
}
bool Result_E_RESULT_FROM_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Result_E_RESULT_FROM Result::FROM_DB;
const Result_E_RESULT_FROM Result::FROM_REDIS;
const Result_E_RESULT_FROM Result::E_RESULT_FROM_MIN;
const Result_E_RESULT_FROM Result::E_RESULT_FROM_MAX;
const int Result::E_RESULT_FROM_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Result_DataLocate::kSectionFromFieldNumber;
const int Result_DataLocate::kSectionToFieldNumber;
const int Result_DataLocate::kHashFieldNumber;
const int Result_DataLocate::kDivisorFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Result_DataLocate::Result_DataLocate()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:neb.Result.DataLocate)
}

void Result_DataLocate::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

Result_DataLocate::Result_DataLocate(const Result_DataLocate& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:neb.Result.DataLocate)
}

void Result_DataLocate::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  section_from_ = 0u;
  section_to_ = 0u;
  hash_ = 0u;
  divisor_ = 0u;
}

Result_DataLocate::~Result_DataLocate() {
  // @@protoc_insertion_point(destructor:neb.Result.DataLocate)
  SharedDtor();
}

void Result_DataLocate::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Result_DataLocate::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Result_DataLocate::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Result_DataLocate_descriptor_;
}

const Result_DataLocate& Result_DataLocate::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mydis_2eproto();
  return *default_instance_;
}

Result_DataLocate* Result_DataLocate::default_instance_ = NULL;

Result_DataLocate* Result_DataLocate::New(::google::protobuf::Arena* arena) const {
  Result_DataLocate* n = new Result_DataLocate;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Result_DataLocate::Clear() {
// @@protoc_insertion_point(message_clear_start:neb.Result.DataLocate)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(Result_DataLocate, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<Result_DataLocate*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(section_from_, divisor_);

#undef ZR_HELPER_
#undef ZR_

}

bool Result_DataLocate::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:neb.Result.DataLocate)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 section_from = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &section_from_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_section_to;
        break;
      }

      // optional uint32 section_to = 2;
      case 2: {
        if (tag == 16) {
         parse_section_to:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &section_to_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_hash;
        break;
      }

      // optional uint32 hash = 3;
      case 3: {
        if (tag == 24) {
         parse_hash:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &hash_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_divisor;
        break;
      }

      // optional uint32 divisor = 4;
      case 4: {
        if (tag == 32) {
         parse_divisor:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &divisor_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:neb.Result.DataLocate)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:neb.Result.DataLocate)
  return false;
#undef DO_
}

void Result_DataLocate::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:neb.Result.DataLocate)
  // optional uint32 section_from = 1;
  if (this->section_from() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->section_from(), output);
  }

  // optional uint32 section_to = 2;
  if (this->section_to() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->section_to(), output);
  }

  // optional uint32 hash = 3;
  if (this->hash() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->hash(), output);
  }

  // optional uint32 divisor = 4;
  if (this->divisor() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->divisor(), output);
  }

  // @@protoc_insertion_point(serialize_end:neb.Result.DataLocate)
}

::google::protobuf::uint8* Result_DataLocate::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:neb.Result.DataLocate)
  // optional uint32 section_from = 1;
  if (this->section_from() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->section_from(), target);
  }

  // optional uint32 section_to = 2;
  if (this->section_to() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->section_to(), target);
  }

  // optional uint32 hash = 3;
  if (this->hash() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->hash(), target);
  }

  // optional uint32 divisor = 4;
  if (this->divisor() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->divisor(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:neb.Result.DataLocate)
  return target;
}

int Result_DataLocate::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:neb.Result.DataLocate)
  int total_size = 0;

  // optional uint32 section_from = 1;
  if (this->section_from() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->section_from());
  }

  // optional uint32 section_to = 2;
  if (this->section_to() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->section_to());
  }

  // optional uint32 hash = 3;
  if (this->hash() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->hash());
  }

  // optional uint32 divisor = 4;
  if (this->divisor() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->divisor());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Result_DataLocate::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:neb.Result.DataLocate)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const Result_DataLocate* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Result_DataLocate>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:neb.Result.DataLocate)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:neb.Result.DataLocate)
    MergeFrom(*source);
  }
}

void Result_DataLocate::MergeFrom(const Result_DataLocate& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:neb.Result.DataLocate)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.section_from() != 0) {
    set_section_from(from.section_from());
  }
  if (from.section_to() != 0) {
    set_section_to(from.section_to());
  }
  if (from.hash() != 0) {
    set_hash(from.hash());
  }
  if (from.divisor() != 0) {
    set_divisor(from.divisor());
  }
}

void Result_DataLocate::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:neb.Result.DataLocate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Result_DataLocate::CopyFrom(const Result_DataLocate& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:neb.Result.DataLocate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Result_DataLocate::IsInitialized() const {

  return true;
}

void Result_DataLocate::Swap(Result_DataLocate* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Result_DataLocate::InternalSwap(Result_DataLocate* other) {
  std::swap(section_from_, other->section_from_);
  std::swap(section_to_, other->section_to_);
  std::swap(hash_, other->hash_);
  std::swap(divisor_, other->divisor_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Result_DataLocate::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Result_DataLocate_descriptor_;
  metadata.reflection = Result_DataLocate_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Result::kErrNoFieldNumber;
const int Result::kErrMsgFieldNumber;
const int Result::kTotalCountFieldNumber;
const int Result::kCurrentCountFieldNumber;
const int Result::kRecordDataFieldNumber;
const int Result::kFromFieldNumber;
const int Result::kLocateFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Result::Result()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:neb.Result)
}

void Result::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  locate_ = const_cast< ::neb::Result_DataLocate*>(&::neb::Result_DataLocate::default_instance());
}

Result::Result(const Result& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:neb.Result)
}

void Result::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  err_no_ = 0;
  err_msg_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  total_count_ = 0;
  current_count_ = 0;
  from_ = 0;
  locate_ = NULL;
}

Result::~Result() {
  // @@protoc_insertion_point(destructor:neb.Result)
  SharedDtor();
}

void Result::SharedDtor() {
  err_msg_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
    delete locate_;
  }
}

void Result::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Result::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Result_descriptor_;
}

const Result& Result::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mydis_2eproto();
  return *default_instance_;
}

Result* Result::default_instance_ = NULL;

Result* Result::New(::google::protobuf::Arena* arena) const {
  Result* n = new Result;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Result::Clear() {
// @@protoc_insertion_point(message_clear_start:neb.Result)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(Result, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<Result*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(err_no_, total_count_);
  ZR_(current_count_, from_);
  err_msg_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && locate_ != NULL) delete locate_;
  locate_ = NULL;

#undef ZR_HELPER_
#undef ZR_

  record_data_.Clear();
}

bool Result::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:neb.Result)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 err_no = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &err_no_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_err_msg;
        break;
      }

      // optional bytes err_msg = 2;
      case 2: {
        if (tag == 18) {
         parse_err_msg:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_err_msg()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_total_count;
        break;
      }

      // optional int32 total_count = 3;
      case 3: {
        if (tag == 24) {
         parse_total_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &total_count_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_current_count;
        break;
      }

      // optional int32 current_count = 4;
      case 4: {
        if (tag == 32) {
         parse_current_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &current_count_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_record_data;
        break;
      }

      // repeated .neb.Record record_data = 5;
      case 5: {
        if (tag == 42) {
         parse_record_data:
          DO_(input->IncrementRecursionDepth());
         parse_loop_record_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_record_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_loop_record_data;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectTag(48)) goto parse_from;
        break;
      }

      // optional int32 from = 6;
      case 6: {
        if (tag == 48) {
         parse_from:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &from_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_locate;
        break;
      }

      // optional .neb.Result.DataLocate locate = 7;
      case 7: {
        if (tag == 58) {
         parse_locate:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_locate()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:neb.Result)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:neb.Result)
  return false;
#undef DO_
}

void Result::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:neb.Result)
  // optional int32 err_no = 1;
  if (this->err_no() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->err_no(), output);
  }

  // optional bytes err_msg = 2;
  if (this->err_msg().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->err_msg(), output);
  }

  // optional int32 total_count = 3;
  if (this->total_count() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->total_count(), output);
  }

  // optional int32 current_count = 4;
  if (this->current_count() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->current_count(), output);
  }

  // repeated .neb.Record record_data = 5;
  for (unsigned int i = 0, n = this->record_data_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->record_data(i), output);
  }

  // optional int32 from = 6;
  if (this->from() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->from(), output);
  }

  // optional .neb.Result.DataLocate locate = 7;
  if (this->has_locate()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, *this->locate_, output);
  }

  // @@protoc_insertion_point(serialize_end:neb.Result)
}

::google::protobuf::uint8* Result::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:neb.Result)
  // optional int32 err_no = 1;
  if (this->err_no() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->err_no(), target);
  }

  // optional bytes err_msg = 2;
  if (this->err_msg().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->err_msg(), target);
  }

  // optional int32 total_count = 3;
  if (this->total_count() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->total_count(), target);
  }

  // optional int32 current_count = 4;
  if (this->current_count() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->current_count(), target);
  }

  // repeated .neb.Record record_data = 5;
  for (unsigned int i = 0, n = this->record_data_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        5, this->record_data(i), false, target);
  }

  // optional int32 from = 6;
  if (this->from() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->from(), target);
  }

  // optional .neb.Result.DataLocate locate = 7;
  if (this->has_locate()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        7, *this->locate_, false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:neb.Result)
  return target;
}

int Result::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:neb.Result)
  int total_size = 0;

  // optional int32 err_no = 1;
  if (this->err_no() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->err_no());
  }

  // optional bytes err_msg = 2;
  if (this->err_msg().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->err_msg());
  }

  // optional int32 total_count = 3;
  if (this->total_count() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->total_count());
  }

  // optional int32 current_count = 4;
  if (this->current_count() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->current_count());
  }

  // optional int32 from = 6;
  if (this->from() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->from());
  }

  // optional .neb.Result.DataLocate locate = 7;
  if (this->has_locate()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->locate_);
  }

  // repeated .neb.Record record_data = 5;
  total_size += 1 * this->record_data_size();
  for (int i = 0; i < this->record_data_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->record_data(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Result::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:neb.Result)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const Result* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Result>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:neb.Result)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:neb.Result)
    MergeFrom(*source);
  }
}

void Result::MergeFrom(const Result& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:neb.Result)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  record_data_.MergeFrom(from.record_data_);
  if (from.err_no() != 0) {
    set_err_no(from.err_no());
  }
  if (from.err_msg().size() > 0) {

    err_msg_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.err_msg_);
  }
  if (from.total_count() != 0) {
    set_total_count(from.total_count());
  }
  if (from.current_count() != 0) {
    set_current_count(from.current_count());
  }
  if (from.from() != 0) {
    set_from(from.from());
  }
  if (from.has_locate()) {
    mutable_locate()->::neb::Result_DataLocate::MergeFrom(from.locate());
  }
}

void Result::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:neb.Result)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Result::CopyFrom(const Result& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:neb.Result)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Result::IsInitialized() const {

  return true;
}

void Result::Swap(Result* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Result::InternalSwap(Result* other) {
  std::swap(err_no_, other->err_no_);
  err_msg_.Swap(&other->err_msg_);
  std::swap(total_count_, other->total_count_);
  std::swap(current_count_, other->current_count_);
  record_data_.UnsafeArenaSwap(&other->record_data_);
  std::swap(from_, other->from_);
  std::swap(locate_, other->locate_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Result::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Result_descriptor_;
  metadata.reflection = Result_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Result_DataLocate

// optional uint32 section_from = 1;
void Result_DataLocate::clear_section_from() {
  section_from_ = 0u;
}
 ::google::protobuf::uint32 Result_DataLocate::section_from() const {
  // @@protoc_insertion_point(field_get:neb.Result.DataLocate.section_from)
  return section_from_;
}
 void Result_DataLocate::set_section_from(::google::protobuf::uint32 value) {
  
  section_from_ = value;
  // @@protoc_insertion_point(field_set:neb.Result.DataLocate.section_from)
}

// optional uint32 section_to = 2;
void Result_DataLocate::clear_section_to() {
  section_to_ = 0u;
}
 ::google::protobuf::uint32 Result_DataLocate::section_to() const {
  // @@protoc_insertion_point(field_get:neb.Result.DataLocate.section_to)
  return section_to_;
}
 void Result_DataLocate::set_section_to(::google::protobuf::uint32 value) {
  
  section_to_ = value;
  // @@protoc_insertion_point(field_set:neb.Result.DataLocate.section_to)
}

// optional uint32 hash = 3;
void Result_DataLocate::clear_hash() {
  hash_ = 0u;
}
 ::google::protobuf::uint32 Result_DataLocate::hash() const {
  // @@protoc_insertion_point(field_get:neb.Result.DataLocate.hash)
  return hash_;
}
 void Result_DataLocate::set_hash(::google::protobuf::uint32 value) {
  
  hash_ = value;
  // @@protoc_insertion_point(field_set:neb.Result.DataLocate.hash)
}

// optional uint32 divisor = 4;
void Result_DataLocate::clear_divisor() {
  divisor_ = 0u;
}
 ::google::protobuf::uint32 Result_DataLocate::divisor() const {
  // @@protoc_insertion_point(field_get:neb.Result.DataLocate.divisor)
  return divisor_;
}
 void Result_DataLocate::set_divisor(::google::protobuf::uint32 value) {
  
  divisor_ = value;
  // @@protoc_insertion_point(field_set:neb.Result.DataLocate.divisor)
}

// -------------------------------------------------------------------

// Result

// optional int32 err_no = 1;
void Result::clear_err_no() {
  err_no_ = 0;
}
 ::google::protobuf::int32 Result::err_no() const {
  // @@protoc_insertion_point(field_get:neb.Result.err_no)
  return err_no_;
}
 void Result::set_err_no(::google::protobuf::int32 value) {
  
  err_no_ = value;
  // @@protoc_insertion_point(field_set:neb.Result.err_no)
}

// optional bytes err_msg = 2;
void Result::clear_err_msg() {
  err_msg_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& Result::err_msg() const {
  // @@protoc_insertion_point(field_get:neb.Result.err_msg)
  return err_msg_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Result::set_err_msg(const ::std::string& value) {
  
  err_msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:neb.Result.err_msg)
}
 void Result::set_err_msg(const char* value) {
  
  err_msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:neb.Result.err_msg)
}
 void Result::set_err_msg(const void* value, size_t size) {
  
  err_msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:neb.Result.err_msg)
}
 ::std::string* Result::mutable_err_msg() {
  
  // @@protoc_insertion_point(field_mutable:neb.Result.err_msg)
  return err_msg_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Result::release_err_msg() {
  // @@protoc_insertion_point(field_release:neb.Result.err_msg)
  
  return err_msg_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Result::set_allocated_err_msg(::std::string* err_msg) {
  if (err_msg != NULL) {
    
  } else {
    
  }
  err_msg_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), err_msg);
  // @@protoc_insertion_point(field_set_allocated:neb.Result.err_msg)
}

// optional int32 total_count = 3;
void Result::clear_total_count() {
  total_count_ = 0;
}
 ::google::protobuf::int32 Result::total_count() const {
  // @@protoc_insertion_point(field_get:neb.Result.total_count)
  return total_count_;
}
 void Result::set_total_count(::google::protobuf::int32 value) {
  
  total_count_ = value;
  // @@protoc_insertion_point(field_set:neb.Result.total_count)
}

// optional int32 current_count = 4;
void Result::clear_current_count() {
  current_count_ = 0;
}
 ::google::protobuf::int32 Result::current_count() const {
  // @@protoc_insertion_point(field_get:neb.Result.current_count)
  return current_count_;
}
 void Result::set_current_count(::google::protobuf::int32 value) {
  
  current_count_ = value;
  // @@protoc_insertion_point(field_set:neb.Result.current_count)
}

// repeated .neb.Record record_data = 5;
int Result::record_data_size() const {
  return record_data_.size();
}
void Result::clear_record_data() {
  record_data_.Clear();
}
const ::neb::Record& Result::record_data(int index) const {
  // @@protoc_insertion_point(field_get:neb.Result.record_data)
  return record_data_.Get(index);
}
::neb::Record* Result::mutable_record_data(int index) {
  // @@protoc_insertion_point(field_mutable:neb.Result.record_data)
  return record_data_.Mutable(index);
}
::neb::Record* Result::add_record_data() {
  // @@protoc_insertion_point(field_add:neb.Result.record_data)
  return record_data_.Add();
}
::google::protobuf::RepeatedPtrField< ::neb::Record >*
Result::mutable_record_data() {
  // @@protoc_insertion_point(field_mutable_list:neb.Result.record_data)
  return &record_data_;
}
const ::google::protobuf::RepeatedPtrField< ::neb::Record >&
Result::record_data() const {
  // @@protoc_insertion_point(field_list:neb.Result.record_data)
  return record_data_;
}

// optional int32 from = 6;
void Result::clear_from() {
  from_ = 0;
}
 ::google::protobuf::int32 Result::from() const {
  // @@protoc_insertion_point(field_get:neb.Result.from)
  return from_;
}
 void Result::set_from(::google::protobuf::int32 value) {
  
  from_ = value;
  // @@protoc_insertion_point(field_set:neb.Result.from)
}

// optional .neb.Result.DataLocate locate = 7;
bool Result::has_locate() const {
  return !_is_default_instance_ && locate_ != NULL;
}
void Result::clear_locate() {
  if (GetArenaNoVirtual() == NULL && locate_ != NULL) delete locate_;
  locate_ = NULL;
}
const ::neb::Result_DataLocate& Result::locate() const {
  // @@protoc_insertion_point(field_get:neb.Result.locate)
  return locate_ != NULL ? *locate_ : *default_instance_->locate_;
}
::neb::Result_DataLocate* Result::mutable_locate() {
  
  if (locate_ == NULL) {
    locate_ = new ::neb::Result_DataLocate;
  }
  // @@protoc_insertion_point(field_mutable:neb.Result.locate)
  return locate_;
}
::neb::Result_DataLocate* Result::release_locate() {
  // @@protoc_insertion_point(field_release:neb.Result.locate)
  
  ::neb::Result_DataLocate* temp = locate_;
  locate_ = NULL;
  return temp;
}
void Result::set_allocated_locate(::neb::Result_DataLocate* locate) {
  delete locate_;
  locate_ = locate;
  if (locate) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:neb.Result.locate)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace neb

// @@protoc_insertion_point(global_scope)
