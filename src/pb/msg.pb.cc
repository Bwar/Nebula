// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: msg.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "msg.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* MsgHead_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgHead_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgBody_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgBody_reflection_ = NULL;
struct MsgBodyOneofInstance {
  const ::MsgBody_Request* req_target_;
  const ::MsgBody_Response* rsp_result_;
}* MsgBody_default_oneof_instance_ = NULL;
const ::google::protobuf::Descriptor* MsgBody_Request_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgBody_Request_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgBody_Response_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgBody_Response_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_msg_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_msg_2eproto() {
  protobuf_AddDesc_msg_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "msg.proto");
  GOOGLE_CHECK(file != NULL);
  MsgHead_descriptor_ = file->message_type(0);
  static const int MsgHead_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgHead, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgHead, seq_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgHead, len_),
  };
  MsgHead_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      MsgHead_descriptor_,
      MsgHead::default_instance_,
      MsgHead_offsets_,
      -1,
      -1,
      -1,
      sizeof(MsgHead),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgHead, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgHead, _is_default_instance_));
  MsgBody_descriptor_ = file->message_type(1);
  static const int MsgBody_offsets_[6] = {
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(MsgBody_default_oneof_instance_, req_target_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(MsgBody_default_oneof_instance_, rsp_result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgBody, data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgBody, add_on_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgBody, trace_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgBody, msg_type_),
  };
  MsgBody_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      MsgBody_descriptor_,
      MsgBody::default_instance_,
      MsgBody_offsets_,
      -1,
      -1,
      -1,
      MsgBody_default_oneof_instance_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgBody, _oneof_case_[0]),
      sizeof(MsgBody),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgBody, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgBody, _is_default_instance_));
  MsgBody_Request_descriptor_ = MsgBody_descriptor_->nested_type(0);
  static const int MsgBody_Request_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgBody_Request, route_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgBody_Request, route_),
  };
  MsgBody_Request_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      MsgBody_Request_descriptor_,
      MsgBody_Request::default_instance_,
      MsgBody_Request_offsets_,
      -1,
      -1,
      -1,
      sizeof(MsgBody_Request),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgBody_Request, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgBody_Request, _is_default_instance_));
  MsgBody_Response_descriptor_ = MsgBody_descriptor_->nested_type(1);
  static const int MsgBody_Response_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgBody_Response, code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgBody_Response, msg_),
  };
  MsgBody_Response_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      MsgBody_Response_descriptor_,
      MsgBody_Response::default_instance_,
      MsgBody_Response_offsets_,
      -1,
      -1,
      -1,
      sizeof(MsgBody_Response),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgBody_Response, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgBody_Response, _is_default_instance_));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_msg_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      MsgHead_descriptor_, &MsgHead::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      MsgBody_descriptor_, &MsgBody::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      MsgBody_Request_descriptor_, &MsgBody_Request::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      MsgBody_Response_descriptor_, &MsgBody_Response::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_msg_2eproto() {
  delete MsgHead::default_instance_;
  delete MsgHead_reflection_;
  delete MsgBody::default_instance_;
  delete MsgBody_default_oneof_instance_;
  delete MsgBody_reflection_;
  delete MsgBody_Request::default_instance_;
  delete MsgBody_Request_reflection_;
  delete MsgBody_Response::default_instance_;
  delete MsgBody_Response_reflection_;
}

void protobuf_AddDesc_msg_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AddDesc_msg_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\tmsg.proto\"0\n\007MsgHead\022\013\n\003cmd\030\001 \001(\007\022\013\n\003s"
    "eq\030\002 \001(\007\022\013\n\003len\030\003 \001(\017\"\351\001\n\007MsgBody\022&\n\nreq"
    "_target\030\001 \001(\0132\020.MsgBody.RequestH\000\022\'\n\nrsp"
    "_result\030\002 \001(\0132\021.MsgBody.ResponseH\000\022\014\n\004da"
    "ta\030\003 \001(\014\022\016\n\006add_on\030\004 \001(\014\022\020\n\010trace_id\030\005 \001"
    "(\t\032*\n\007Request\022\020\n\010route_id\030\001 \001(\r\022\r\n\005route"
    "\030\002 \001(\t\032%\n\010Response\022\014\n\004code\030\001 \001(\005\022\013\n\003msg\030"
    "\002 \001(\014B\n\n\010msg_typeb\006proto3", 305);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "msg.proto", &protobuf_RegisterTypes);
  MsgHead::default_instance_ = new MsgHead();
  MsgBody::default_instance_ = new MsgBody();
  MsgBody_default_oneof_instance_ = new MsgBodyOneofInstance();
  MsgBody_Request::default_instance_ = new MsgBody_Request();
  MsgBody_Response::default_instance_ = new MsgBody_Response();
  MsgHead::default_instance_->InitAsDefaultInstance();
  MsgBody::default_instance_->InitAsDefaultInstance();
  MsgBody_Request::default_instance_->InitAsDefaultInstance();
  MsgBody_Response::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_msg_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_msg_2eproto {
  StaticDescriptorInitializer_msg_2eproto() {
    protobuf_AddDesc_msg_2eproto();
  }
} static_descriptor_initializer_msg_2eproto_;

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MsgHead::kCmdFieldNumber;
const int MsgHead::kSeqFieldNumber;
const int MsgHead::kLenFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MsgHead::MsgHead()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MsgHead)
}

void MsgHead::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

MsgHead::MsgHead(const MsgHead& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MsgHead)
}

void MsgHead::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  cmd_ = 0u;
  seq_ = 0u;
  len_ = 0;
}

MsgHead::~MsgHead() {
  // @@protoc_insertion_point(destructor:MsgHead)
  SharedDtor();
}

void MsgHead::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MsgHead::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgHead::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgHead_descriptor_;
}

const MsgHead& MsgHead::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_2eproto();
  return *default_instance_;
}

MsgHead* MsgHead::default_instance_ = NULL;

MsgHead* MsgHead::New(::google::protobuf::Arena* arena) const {
  MsgHead* n = new MsgHead;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void MsgHead::Clear() {
// @@protoc_insertion_point(message_clear_start:MsgHead)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(MsgHead, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<MsgHead*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(cmd_, len_);

#undef ZR_HELPER_
#undef ZR_

}

bool MsgHead::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MsgHead)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed32 cmd = 1;
      case 1: {
        if (tag == 13) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &cmd_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(21)) goto parse_seq;
        break;
      }

      // optional fixed32 seq = 2;
      case 2: {
        if (tag == 21) {
         parse_seq:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &seq_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(29)) goto parse_len;
        break;
      }

      // optional sfixed32 len = 3;
      case 3: {
        if (tag == 29) {
         parse_len:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED32>(
                 input, &len_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MsgHead)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MsgHead)
  return false;
#undef DO_
}

void MsgHead::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MsgHead)
  // optional fixed32 cmd = 1;
  if (this->cmd() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(1, this->cmd(), output);
  }

  // optional fixed32 seq = 2;
  if (this->seq() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(2, this->seq(), output);
  }

  // optional sfixed32 len = 3;
  if (this->len() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteSFixed32(3, this->len(), output);
  }

  // @@protoc_insertion_point(serialize_end:MsgHead)
}

::google::protobuf::uint8* MsgHead::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MsgHead)
  // optional fixed32 cmd = 1;
  if (this->cmd() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(1, this->cmd(), target);
  }

  // optional fixed32 seq = 2;
  if (this->seq() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(2, this->seq(), target);
  }

  // optional sfixed32 len = 3;
  if (this->len() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSFixed32ToArray(3, this->len(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:MsgHead)
  return target;
}

int MsgHead::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:MsgHead)
  int total_size = 0;

  // optional fixed32 cmd = 1;
  if (this->cmd() != 0) {
    total_size += 1 + 4;
  }

  // optional fixed32 seq = 2;
  if (this->seq() != 0) {
    total_size += 1 + 4;
  }

  // optional sfixed32 len = 3;
  if (this->len() != 0) {
    total_size += 1 + 4;
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgHead::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:MsgHead)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const MsgHead* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const MsgHead>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:MsgHead)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:MsgHead)
    MergeFrom(*source);
  }
}

void MsgHead::MergeFrom(const MsgHead& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:MsgHead)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.cmd() != 0) {
    set_cmd(from.cmd());
  }
  if (from.seq() != 0) {
    set_seq(from.seq());
  }
  if (from.len() != 0) {
    set_len(from.len());
  }
}

void MsgHead::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:MsgHead)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgHead::CopyFrom(const MsgHead& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:MsgHead)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgHead::IsInitialized() const {

  return true;
}

void MsgHead::Swap(MsgHead* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MsgHead::InternalSwap(MsgHead* other) {
  std::swap(cmd_, other->cmd_);
  std::swap(seq_, other->seq_);
  std::swap(len_, other->len_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata MsgHead::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgHead_descriptor_;
  metadata.reflection = MsgHead_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// MsgHead

// optional fixed32 cmd = 1;
void MsgHead::clear_cmd() {
  cmd_ = 0u;
}
 ::google::protobuf::uint32 MsgHead::cmd() const {
  // @@protoc_insertion_point(field_get:MsgHead.cmd)
  return cmd_;
}
 void MsgHead::set_cmd(::google::protobuf::uint32 value) {
  
  cmd_ = value;
  // @@protoc_insertion_point(field_set:MsgHead.cmd)
}

// optional fixed32 seq = 2;
void MsgHead::clear_seq() {
  seq_ = 0u;
}
 ::google::protobuf::uint32 MsgHead::seq() const {
  // @@protoc_insertion_point(field_get:MsgHead.seq)
  return seq_;
}
 void MsgHead::set_seq(::google::protobuf::uint32 value) {
  
  seq_ = value;
  // @@protoc_insertion_point(field_set:MsgHead.seq)
}

// optional sfixed32 len = 3;
void MsgHead::clear_len() {
  len_ = 0;
}
 ::google::protobuf::int32 MsgHead::len() const {
  // @@protoc_insertion_point(field_get:MsgHead.len)
  return len_;
}
 void MsgHead::set_len(::google::protobuf::int32 value) {
  
  len_ = value;
  // @@protoc_insertion_point(field_set:MsgHead.len)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MsgBody_Request::kRouteIdFieldNumber;
const int MsgBody_Request::kRouteFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MsgBody_Request::MsgBody_Request()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MsgBody.Request)
}

void MsgBody_Request::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

MsgBody_Request::MsgBody_Request(const MsgBody_Request& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MsgBody.Request)
}

void MsgBody_Request::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  route_id_ = 0u;
  route_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

MsgBody_Request::~MsgBody_Request() {
  // @@protoc_insertion_point(destructor:MsgBody.Request)
  SharedDtor();
}

void MsgBody_Request::SharedDtor() {
  route_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void MsgBody_Request::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgBody_Request::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgBody_Request_descriptor_;
}

const MsgBody_Request& MsgBody_Request::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_2eproto();
  return *default_instance_;
}

MsgBody_Request* MsgBody_Request::default_instance_ = NULL;

MsgBody_Request* MsgBody_Request::New(::google::protobuf::Arena* arena) const {
  MsgBody_Request* n = new MsgBody_Request;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void MsgBody_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:MsgBody.Request)
  route_id_ = 0u;
  route_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool MsgBody_Request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MsgBody.Request)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 route_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &route_id_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_route;
        break;
      }

      // optional string route = 2;
      case 2: {
        if (tag == 18) {
         parse_route:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_route()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->route().data(), this->route().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "MsgBody.Request.route"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MsgBody.Request)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MsgBody.Request)
  return false;
#undef DO_
}

void MsgBody_Request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MsgBody.Request)
  // optional uint32 route_id = 1;
  if (this->route_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->route_id(), output);
  }

  // optional string route = 2;
  if (this->route().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->route().data(), this->route().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "MsgBody.Request.route");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->route(), output);
  }

  // @@protoc_insertion_point(serialize_end:MsgBody.Request)
}

::google::protobuf::uint8* MsgBody_Request::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MsgBody.Request)
  // optional uint32 route_id = 1;
  if (this->route_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->route_id(), target);
  }

  // optional string route = 2;
  if (this->route().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->route().data(), this->route().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "MsgBody.Request.route");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->route(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:MsgBody.Request)
  return target;
}

int MsgBody_Request::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:MsgBody.Request)
  int total_size = 0;

  // optional uint32 route_id = 1;
  if (this->route_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->route_id());
  }

  // optional string route = 2;
  if (this->route().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->route());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgBody_Request::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:MsgBody.Request)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const MsgBody_Request* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const MsgBody_Request>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:MsgBody.Request)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:MsgBody.Request)
    MergeFrom(*source);
  }
}

void MsgBody_Request::MergeFrom(const MsgBody_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:MsgBody.Request)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.route_id() != 0) {
    set_route_id(from.route_id());
  }
  if (from.route().size() > 0) {

    route_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.route_);
  }
}

void MsgBody_Request::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:MsgBody.Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgBody_Request::CopyFrom(const MsgBody_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:MsgBody.Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgBody_Request::IsInitialized() const {

  return true;
}

void MsgBody_Request::Swap(MsgBody_Request* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MsgBody_Request::InternalSwap(MsgBody_Request* other) {
  std::swap(route_id_, other->route_id_);
  route_.Swap(&other->route_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata MsgBody_Request::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgBody_Request_descriptor_;
  metadata.reflection = MsgBody_Request_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MsgBody_Response::kCodeFieldNumber;
const int MsgBody_Response::kMsgFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MsgBody_Response::MsgBody_Response()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MsgBody.Response)
}

void MsgBody_Response::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

MsgBody_Response::MsgBody_Response(const MsgBody_Response& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MsgBody.Response)
}

void MsgBody_Response::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  code_ = 0;
  msg_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

MsgBody_Response::~MsgBody_Response() {
  // @@protoc_insertion_point(destructor:MsgBody.Response)
  SharedDtor();
}

void MsgBody_Response::SharedDtor() {
  msg_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void MsgBody_Response::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgBody_Response::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgBody_Response_descriptor_;
}

const MsgBody_Response& MsgBody_Response::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_2eproto();
  return *default_instance_;
}

MsgBody_Response* MsgBody_Response::default_instance_ = NULL;

MsgBody_Response* MsgBody_Response::New(::google::protobuf::Arena* arena) const {
  MsgBody_Response* n = new MsgBody_Response;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void MsgBody_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:MsgBody.Response)
  code_ = 0;
  msg_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool MsgBody_Response::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MsgBody.Response)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 code = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &code_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_msg;
        break;
      }

      // optional bytes msg = 2;
      case 2: {
        if (tag == 18) {
         parse_msg:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_msg()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MsgBody.Response)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MsgBody.Response)
  return false;
#undef DO_
}

void MsgBody_Response::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MsgBody.Response)
  // optional int32 code = 1;
  if (this->code() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->code(), output);
  }

  // optional bytes msg = 2;
  if (this->msg().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->msg(), output);
  }

  // @@protoc_insertion_point(serialize_end:MsgBody.Response)
}

::google::protobuf::uint8* MsgBody_Response::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MsgBody.Response)
  // optional int32 code = 1;
  if (this->code() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->code(), target);
  }

  // optional bytes msg = 2;
  if (this->msg().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->msg(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:MsgBody.Response)
  return target;
}

int MsgBody_Response::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:MsgBody.Response)
  int total_size = 0;

  // optional int32 code = 1;
  if (this->code() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->code());
  }

  // optional bytes msg = 2;
  if (this->msg().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->msg());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgBody_Response::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:MsgBody.Response)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const MsgBody_Response* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const MsgBody_Response>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:MsgBody.Response)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:MsgBody.Response)
    MergeFrom(*source);
  }
}

void MsgBody_Response::MergeFrom(const MsgBody_Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:MsgBody.Response)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.code() != 0) {
    set_code(from.code());
  }
  if (from.msg().size() > 0) {

    msg_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.msg_);
  }
}

void MsgBody_Response::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:MsgBody.Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgBody_Response::CopyFrom(const MsgBody_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:MsgBody.Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgBody_Response::IsInitialized() const {

  return true;
}

void MsgBody_Response::Swap(MsgBody_Response* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MsgBody_Response::InternalSwap(MsgBody_Response* other) {
  std::swap(code_, other->code_);
  msg_.Swap(&other->msg_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata MsgBody_Response::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgBody_Response_descriptor_;
  metadata.reflection = MsgBody_Response_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MsgBody::kReqTargetFieldNumber;
const int MsgBody::kRspResultFieldNumber;
const int MsgBody::kDataFieldNumber;
const int MsgBody::kAddOnFieldNumber;
const int MsgBody::kTraceIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MsgBody::MsgBody()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MsgBody)
}

void MsgBody::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  MsgBody_default_oneof_instance_->req_target_ = const_cast< ::MsgBody_Request*>(&::MsgBody_Request::default_instance());
  MsgBody_default_oneof_instance_->rsp_result_ = const_cast< ::MsgBody_Response*>(&::MsgBody_Response::default_instance());
}

MsgBody::MsgBody(const MsgBody& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MsgBody)
}

void MsgBody::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  add_on_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  trace_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_msg_type();
}

MsgBody::~MsgBody() {
  // @@protoc_insertion_point(destructor:MsgBody)
  SharedDtor();
}

void MsgBody::SharedDtor() {
  data_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  add_on_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  trace_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (has_msg_type()) {
    clear_msg_type();
  }
  if (this != default_instance_) {
  }
}

void MsgBody::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgBody::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgBody_descriptor_;
}

const MsgBody& MsgBody::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msg_2eproto();
  return *default_instance_;
}

MsgBody* MsgBody::default_instance_ = NULL;

MsgBody* MsgBody::New(::google::protobuf::Arena* arena) const {
  MsgBody* n = new MsgBody;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void MsgBody::clear_msg_type() {
// @@protoc_insertion_point(one_of_clear_start:MsgBody)
  switch(msg_type_case()) {
    case kReqTarget: {
      delete msg_type_.req_target_;
      break;
    }
    case kRspResult: {
      delete msg_type_.rsp_result_;
      break;
    }
    case MSG_TYPE_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = MSG_TYPE_NOT_SET;
}


void MsgBody::Clear() {
// @@protoc_insertion_point(message_clear_start:MsgBody)
  data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  add_on_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  trace_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_msg_type();
}

bool MsgBody::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MsgBody)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .MsgBody.Request req_target = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_req_target()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_rsp_result;
        break;
      }

      // optional .MsgBody.Response rsp_result = 2;
      case 2: {
        if (tag == 18) {
         parse_rsp_result:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_rsp_result()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_data;
        break;
      }

      // optional bytes data = 3;
      case 3: {
        if (tag == 26) {
         parse_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_add_on;
        break;
      }

      // optional bytes add_on = 4;
      case 4: {
        if (tag == 34) {
         parse_add_on:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_add_on()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_trace_id;
        break;
      }

      // optional string trace_id = 5;
      case 5: {
        if (tag == 42) {
         parse_trace_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_trace_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->trace_id().data(), this->trace_id().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "MsgBody.trace_id"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MsgBody)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MsgBody)
  return false;
#undef DO_
}

void MsgBody::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MsgBody)
  // optional .MsgBody.Request req_target = 1;
  if (has_req_target()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *msg_type_.req_target_, output);
  }

  // optional .MsgBody.Response rsp_result = 2;
  if (has_rsp_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *msg_type_.rsp_result_, output);
  }

  // optional bytes data = 3;
  if (this->data().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->data(), output);
  }

  // optional bytes add_on = 4;
  if (this->add_on().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      4, this->add_on(), output);
  }

  // optional string trace_id = 5;
  if (this->trace_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->trace_id().data(), this->trace_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "MsgBody.trace_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->trace_id(), output);
  }

  // @@protoc_insertion_point(serialize_end:MsgBody)
}

::google::protobuf::uint8* MsgBody::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MsgBody)
  // optional .MsgBody.Request req_target = 1;
  if (has_req_target()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *msg_type_.req_target_, false, target);
  }

  // optional .MsgBody.Response rsp_result = 2;
  if (has_rsp_result()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *msg_type_.rsp_result_, false, target);
  }

  // optional bytes data = 3;
  if (this->data().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->data(), target);
  }

  // optional bytes add_on = 4;
  if (this->add_on().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->add_on(), target);
  }

  // optional string trace_id = 5;
  if (this->trace_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->trace_id().data(), this->trace_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "MsgBody.trace_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->trace_id(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:MsgBody)
  return target;
}

int MsgBody::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:MsgBody)
  int total_size = 0;

  // optional bytes data = 3;
  if (this->data().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->data());
  }

  // optional bytes add_on = 4;
  if (this->add_on().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->add_on());
  }

  // optional string trace_id = 5;
  if (this->trace_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->trace_id());
  }

  switch (msg_type_case()) {
    // optional .MsgBody.Request req_target = 1;
    case kReqTarget: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *msg_type_.req_target_);
      break;
    }
    // optional .MsgBody.Response rsp_result = 2;
    case kRspResult: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *msg_type_.rsp_result_);
      break;
    }
    case MSG_TYPE_NOT_SET: {
      break;
    }
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgBody::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:MsgBody)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const MsgBody* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const MsgBody>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:MsgBody)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:MsgBody)
    MergeFrom(*source);
  }
}

void MsgBody::MergeFrom(const MsgBody& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:MsgBody)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  switch (from.msg_type_case()) {
    case kReqTarget: {
      mutable_req_target()->::MsgBody_Request::MergeFrom(from.req_target());
      break;
    }
    case kRspResult: {
      mutable_rsp_result()->::MsgBody_Response::MergeFrom(from.rsp_result());
      break;
    }
    case MSG_TYPE_NOT_SET: {
      break;
    }
  }
  if (from.data().size() > 0) {

    data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.data_);
  }
  if (from.add_on().size() > 0) {

    add_on_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.add_on_);
  }
  if (from.trace_id().size() > 0) {

    trace_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.trace_id_);
  }
}

void MsgBody::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:MsgBody)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgBody::CopyFrom(const MsgBody& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:MsgBody)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgBody::IsInitialized() const {

  return true;
}

void MsgBody::Swap(MsgBody* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MsgBody::InternalSwap(MsgBody* other) {
  data_.Swap(&other->data_);
  add_on_.Swap(&other->add_on_);
  trace_id_.Swap(&other->trace_id_);
  std::swap(msg_type_, other->msg_type_);
  std::swap(_oneof_case_[0], other->_oneof_case_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata MsgBody::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgBody_descriptor_;
  metadata.reflection = MsgBody_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// MsgBody_Request

// optional uint32 route_id = 1;
void MsgBody_Request::clear_route_id() {
  route_id_ = 0u;
}
 ::google::protobuf::uint32 MsgBody_Request::route_id() const {
  // @@protoc_insertion_point(field_get:MsgBody.Request.route_id)
  return route_id_;
}
 void MsgBody_Request::set_route_id(::google::protobuf::uint32 value) {
  
  route_id_ = value;
  // @@protoc_insertion_point(field_set:MsgBody.Request.route_id)
}

// optional string route = 2;
void MsgBody_Request::clear_route() {
  route_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& MsgBody_Request::route() const {
  // @@protoc_insertion_point(field_get:MsgBody.Request.route)
  return route_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void MsgBody_Request::set_route(const ::std::string& value) {
  
  route_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:MsgBody.Request.route)
}
 void MsgBody_Request::set_route(const char* value) {
  
  route_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:MsgBody.Request.route)
}
 void MsgBody_Request::set_route(const char* value, size_t size) {
  
  route_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:MsgBody.Request.route)
}
 ::std::string* MsgBody_Request::mutable_route() {
  
  // @@protoc_insertion_point(field_mutable:MsgBody.Request.route)
  return route_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* MsgBody_Request::release_route() {
  // @@protoc_insertion_point(field_release:MsgBody.Request.route)
  
  return route_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void MsgBody_Request::set_allocated_route(::std::string* route) {
  if (route != NULL) {
    
  } else {
    
  }
  route_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), route);
  // @@protoc_insertion_point(field_set_allocated:MsgBody.Request.route)
}

// -------------------------------------------------------------------

// MsgBody_Response

// optional int32 code = 1;
void MsgBody_Response::clear_code() {
  code_ = 0;
}
 ::google::protobuf::int32 MsgBody_Response::code() const {
  // @@protoc_insertion_point(field_get:MsgBody.Response.code)
  return code_;
}
 void MsgBody_Response::set_code(::google::protobuf::int32 value) {
  
  code_ = value;
  // @@protoc_insertion_point(field_set:MsgBody.Response.code)
}

// optional bytes msg = 2;
void MsgBody_Response::clear_msg() {
  msg_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& MsgBody_Response::msg() const {
  // @@protoc_insertion_point(field_get:MsgBody.Response.msg)
  return msg_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void MsgBody_Response::set_msg(const ::std::string& value) {
  
  msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:MsgBody.Response.msg)
}
 void MsgBody_Response::set_msg(const char* value) {
  
  msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:MsgBody.Response.msg)
}
 void MsgBody_Response::set_msg(const void* value, size_t size) {
  
  msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:MsgBody.Response.msg)
}
 ::std::string* MsgBody_Response::mutable_msg() {
  
  // @@protoc_insertion_point(field_mutable:MsgBody.Response.msg)
  return msg_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* MsgBody_Response::release_msg() {
  // @@protoc_insertion_point(field_release:MsgBody.Response.msg)
  
  return msg_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void MsgBody_Response::set_allocated_msg(::std::string* msg) {
  if (msg != NULL) {
    
  } else {
    
  }
  msg_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), msg);
  // @@protoc_insertion_point(field_set_allocated:MsgBody.Response.msg)
}

// -------------------------------------------------------------------

// MsgBody

// optional .MsgBody.Request req_target = 1;
bool MsgBody::has_req_target() const {
  return msg_type_case() == kReqTarget;
}
void MsgBody::set_has_req_target() {
  _oneof_case_[0] = kReqTarget;
}
void MsgBody::clear_req_target() {
  if (has_req_target()) {
    delete msg_type_.req_target_;
    clear_has_msg_type();
  }
}
 const ::MsgBody_Request& MsgBody::req_target() const {
  // @@protoc_insertion_point(field_get:MsgBody.req_target)
  return has_req_target()
      ? *msg_type_.req_target_
      : ::MsgBody_Request::default_instance();
}
::MsgBody_Request* MsgBody::mutable_req_target() {
  if (!has_req_target()) {
    clear_msg_type();
    set_has_req_target();
    msg_type_.req_target_ = new ::MsgBody_Request;
  }
  // @@protoc_insertion_point(field_mutable:MsgBody.req_target)
  return msg_type_.req_target_;
}
::MsgBody_Request* MsgBody::release_req_target() {
  // @@protoc_insertion_point(field_release:MsgBody.req_target)
  if (has_req_target()) {
    clear_has_msg_type();
    ::MsgBody_Request* temp = msg_type_.req_target_;
    msg_type_.req_target_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void MsgBody::set_allocated_req_target(::MsgBody_Request* req_target) {
  clear_msg_type();
  if (req_target) {
    set_has_req_target();
    msg_type_.req_target_ = req_target;
  }
  // @@protoc_insertion_point(field_set_allocated:MsgBody.req_target)
}

// optional .MsgBody.Response rsp_result = 2;
bool MsgBody::has_rsp_result() const {
  return msg_type_case() == kRspResult;
}
void MsgBody::set_has_rsp_result() {
  _oneof_case_[0] = kRspResult;
}
void MsgBody::clear_rsp_result() {
  if (has_rsp_result()) {
    delete msg_type_.rsp_result_;
    clear_has_msg_type();
  }
}
 const ::MsgBody_Response& MsgBody::rsp_result() const {
  // @@protoc_insertion_point(field_get:MsgBody.rsp_result)
  return has_rsp_result()
      ? *msg_type_.rsp_result_
      : ::MsgBody_Response::default_instance();
}
::MsgBody_Response* MsgBody::mutable_rsp_result() {
  if (!has_rsp_result()) {
    clear_msg_type();
    set_has_rsp_result();
    msg_type_.rsp_result_ = new ::MsgBody_Response;
  }
  // @@protoc_insertion_point(field_mutable:MsgBody.rsp_result)
  return msg_type_.rsp_result_;
}
::MsgBody_Response* MsgBody::release_rsp_result() {
  // @@protoc_insertion_point(field_release:MsgBody.rsp_result)
  if (has_rsp_result()) {
    clear_has_msg_type();
    ::MsgBody_Response* temp = msg_type_.rsp_result_;
    msg_type_.rsp_result_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void MsgBody::set_allocated_rsp_result(::MsgBody_Response* rsp_result) {
  clear_msg_type();
  if (rsp_result) {
    set_has_rsp_result();
    msg_type_.rsp_result_ = rsp_result;
  }
  // @@protoc_insertion_point(field_set_allocated:MsgBody.rsp_result)
}

// optional bytes data = 3;
void MsgBody::clear_data() {
  data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& MsgBody::data() const {
  // @@protoc_insertion_point(field_get:MsgBody.data)
  return data_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void MsgBody::set_data(const ::std::string& value) {
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:MsgBody.data)
}
 void MsgBody::set_data(const char* value) {
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:MsgBody.data)
}
 void MsgBody::set_data(const void* value, size_t size) {
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:MsgBody.data)
}
 ::std::string* MsgBody::mutable_data() {
  
  // @@protoc_insertion_point(field_mutable:MsgBody.data)
  return data_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* MsgBody::release_data() {
  // @@protoc_insertion_point(field_release:MsgBody.data)
  
  return data_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void MsgBody::set_allocated_data(::std::string* data) {
  if (data != NULL) {
    
  } else {
    
  }
  data_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), data);
  // @@protoc_insertion_point(field_set_allocated:MsgBody.data)
}

// optional bytes add_on = 4;
void MsgBody::clear_add_on() {
  add_on_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& MsgBody::add_on() const {
  // @@protoc_insertion_point(field_get:MsgBody.add_on)
  return add_on_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void MsgBody::set_add_on(const ::std::string& value) {
  
  add_on_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:MsgBody.add_on)
}
 void MsgBody::set_add_on(const char* value) {
  
  add_on_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:MsgBody.add_on)
}
 void MsgBody::set_add_on(const void* value, size_t size) {
  
  add_on_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:MsgBody.add_on)
}
 ::std::string* MsgBody::mutable_add_on() {
  
  // @@protoc_insertion_point(field_mutable:MsgBody.add_on)
  return add_on_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* MsgBody::release_add_on() {
  // @@protoc_insertion_point(field_release:MsgBody.add_on)
  
  return add_on_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void MsgBody::set_allocated_add_on(::std::string* add_on) {
  if (add_on != NULL) {
    
  } else {
    
  }
  add_on_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), add_on);
  // @@protoc_insertion_point(field_set_allocated:MsgBody.add_on)
}

// optional string trace_id = 5;
void MsgBody::clear_trace_id() {
  trace_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& MsgBody::trace_id() const {
  // @@protoc_insertion_point(field_get:MsgBody.trace_id)
  return trace_id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void MsgBody::set_trace_id(const ::std::string& value) {
  
  trace_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:MsgBody.trace_id)
}
 void MsgBody::set_trace_id(const char* value) {
  
  trace_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:MsgBody.trace_id)
}
 void MsgBody::set_trace_id(const char* value, size_t size) {
  
  trace_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:MsgBody.trace_id)
}
 ::std::string* MsgBody::mutable_trace_id() {
  
  // @@protoc_insertion_point(field_mutable:MsgBody.trace_id)
  return trace_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* MsgBody::release_trace_id() {
  // @@protoc_insertion_point(field_release:MsgBody.trace_id)
  
  return trace_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void MsgBody::set_allocated_trace_id(::std::string* trace_id) {
  if (trace_id != NULL) {
    
  } else {
    
  }
  trace_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), trace_id);
  // @@protoc_insertion_point(field_set_allocated:MsgBody.trace_id)
}

bool MsgBody::has_msg_type() const {
  return msg_type_case() != MSG_TYPE_NOT_SET;
}
void MsgBody::clear_has_msg_type() {
  _oneof_case_[0] = MSG_TYPE_NOT_SET;
}
MsgBody::MsgTypeCase MsgBody::msg_type_case() const {
  return MsgBody::MsgTypeCase(_oneof_case_[0]);
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
