// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: report.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "report.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace neb {

namespace {

const ::google::protobuf::Descriptor* ReportRecord_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReportRecord_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* ReportRecord_VALUE_TYPE_descriptor_ = NULL;
const ::google::protobuf::Descriptor* Report_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Report_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_report_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_report_2eproto() {
  protobuf_AddDesc_report_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "report.proto");
  GOOGLE_CHECK(file != NULL);
  ReportRecord_descriptor_ = file->message_type(0);
  static const int ReportRecord_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReportRecord, key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReportRecord, value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReportRecord, item_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReportRecord, value_type_),
  };
  ReportRecord_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ReportRecord_descriptor_,
      ReportRecord::default_instance_,
      ReportRecord_offsets_,
      -1,
      -1,
      -1,
      sizeof(ReportRecord),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReportRecord, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReportRecord, _is_default_instance_));
  ReportRecord_VALUE_TYPE_descriptor_ = ReportRecord_descriptor_->enum_type(0);
  Report_descriptor_ = file->message_type(1);
  static const int Report_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Report, records_),
  };
  Report_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Report_descriptor_,
      Report::default_instance_,
      Report_offsets_,
      -1,
      -1,
      -1,
      sizeof(Report),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Report, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Report, _is_default_instance_));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_report_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ReportRecord_descriptor_, &ReportRecord::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Report_descriptor_, &Report::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_report_2eproto() {
  delete ReportRecord::default_instance_;
  delete ReportRecord_reflection_;
  delete Report::default_instance_;
  delete Report_reflection_;
}

void protobuf_AddDesc_report_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AddDesc_report_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\014report.proto\022\003neb\"\230\001\n\014ReportRecord\022\013\n\003"
    "key\030\001 \001(\014\022\r\n\005value\030\002 \003(\004\022\014\n\004item\030\003 \001(\t\0220"
    "\n\nvalue_type\030\004 \001(\0162\034.neb.ReportRecord.VA"
    "LUE_TYPE\",\n\nVALUE_TYPE\022\r\n\tVALUE_ACC\020\000\022\017\n"
    "\013VALUE_FIXED\020\001\",\n\006Report\022\"\n\007records\030\001 \003("
    "\0132\021.neb.ReportRecordb\006proto3", 228);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "report.proto", &protobuf_RegisterTypes);
  ReportRecord::default_instance_ = new ReportRecord();
  Report::default_instance_ = new Report();
  ReportRecord::default_instance_->InitAsDefaultInstance();
  Report::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_report_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_report_2eproto {
  StaticDescriptorInitializer_report_2eproto() {
    protobuf_AddDesc_report_2eproto();
  }
} static_descriptor_initializer_report_2eproto_;

// ===================================================================

const ::google::protobuf::EnumDescriptor* ReportRecord_VALUE_TYPE_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReportRecord_VALUE_TYPE_descriptor_;
}
bool ReportRecord_VALUE_TYPE_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const ReportRecord_VALUE_TYPE ReportRecord::VALUE_ACC;
const ReportRecord_VALUE_TYPE ReportRecord::VALUE_FIXED;
const ReportRecord_VALUE_TYPE ReportRecord::VALUE_TYPE_MIN;
const ReportRecord_VALUE_TYPE ReportRecord::VALUE_TYPE_MAX;
const int ReportRecord::VALUE_TYPE_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ReportRecord::kKeyFieldNumber;
const int ReportRecord::kValueFieldNumber;
const int ReportRecord::kItemFieldNumber;
const int ReportRecord::kValueTypeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ReportRecord::ReportRecord()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:neb.ReportRecord)
}

void ReportRecord::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

ReportRecord::ReportRecord(const ReportRecord& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:neb.ReportRecord)
}

void ReportRecord::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  item_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  value_type_ = 0;
}

ReportRecord::~ReportRecord() {
  // @@protoc_insertion_point(destructor:neb.ReportRecord)
  SharedDtor();
}

void ReportRecord::SharedDtor() {
  key_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  item_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void ReportRecord::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReportRecord::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReportRecord_descriptor_;
}

const ReportRecord& ReportRecord::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_report_2eproto();
  return *default_instance_;
}

ReportRecord* ReportRecord::default_instance_ = NULL;

ReportRecord* ReportRecord::New(::google::protobuf::Arena* arena) const {
  ReportRecord* n = new ReportRecord;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ReportRecord::Clear() {
// @@protoc_insertion_point(message_clear_start:neb.ReportRecord)
  key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  item_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  value_type_ = 0;
  value_.Clear();
}

bool ReportRecord::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:neb.ReportRecord)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes key = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_key()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_value;
        break;
      }

      // repeated uint64 value = 2;
      case 2: {
        if (tag == 18) {
         parse_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, this->mutable_value())));
        } else if (tag == 16) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 1, 18, input, this->mutable_value())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_item;
        break;
      }

      // optional string item = 3;
      case 3: {
        if (tag == 26) {
         parse_item:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_item()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->item().data(), this->item().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "neb.ReportRecord.item"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_value_type;
        break;
      }

      // optional .neb.ReportRecord.VALUE_TYPE value_type = 4;
      case 4: {
        if (tag == 32) {
         parse_value_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_value_type(static_cast< ::neb::ReportRecord_VALUE_TYPE >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:neb.ReportRecord)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:neb.ReportRecord)
  return false;
#undef DO_
}

void ReportRecord::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:neb.ReportRecord)
  // optional bytes key = 1;
  if (this->key().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->key(), output);
  }

  // repeated uint64 value = 2;
  if (this->value_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(2, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_value_cached_byte_size_);
  }
  for (int i = 0; i < this->value_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64NoTag(
      this->value(i), output);
  }

  // optional string item = 3;
  if (this->item().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->item().data(), this->item().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "neb.ReportRecord.item");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->item(), output);
  }

  // optional .neb.ReportRecord.VALUE_TYPE value_type = 4;
  if (this->value_type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->value_type(), output);
  }

  // @@protoc_insertion_point(serialize_end:neb.ReportRecord)
}

::google::protobuf::uint8* ReportRecord::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:neb.ReportRecord)
  // optional bytes key = 1;
  if (this->key().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->key(), target);
  }

  // repeated uint64 value = 2;
  if (this->value_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      2,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _value_cached_byte_size_, target);
  }
  for (int i = 0; i < this->value_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt64NoTagToArray(this->value(i), target);
  }

  // optional string item = 3;
  if (this->item().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->item().data(), this->item().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "neb.ReportRecord.item");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->item(), target);
  }

  // optional .neb.ReportRecord.VALUE_TYPE value_type = 4;
  if (this->value_type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->value_type(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:neb.ReportRecord)
  return target;
}

int ReportRecord::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:neb.ReportRecord)
  int total_size = 0;

  // optional bytes key = 1;
  if (this->key().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->key());
  }

  // optional string item = 3;
  if (this->item().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->item());
  }

  // optional .neb.ReportRecord.VALUE_TYPE value_type = 4;
  if (this->value_type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->value_type());
  }

  // repeated uint64 value = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->value_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt64Size(this->value(i));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _value_cached_byte_size_ = data_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReportRecord::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:neb.ReportRecord)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const ReportRecord* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const ReportRecord>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:neb.ReportRecord)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:neb.ReportRecord)
    MergeFrom(*source);
  }
}

void ReportRecord::MergeFrom(const ReportRecord& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:neb.ReportRecord)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  value_.MergeFrom(from.value_);
  if (from.key().size() > 0) {

    key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.key_);
  }
  if (from.item().size() > 0) {

    item_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.item_);
  }
  if (from.value_type() != 0) {
    set_value_type(from.value_type());
  }
}

void ReportRecord::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:neb.ReportRecord)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReportRecord::CopyFrom(const ReportRecord& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:neb.ReportRecord)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReportRecord::IsInitialized() const {

  return true;
}

void ReportRecord::Swap(ReportRecord* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ReportRecord::InternalSwap(ReportRecord* other) {
  key_.Swap(&other->key_);
  value_.UnsafeArenaSwap(&other->value_);
  item_.Swap(&other->item_);
  std::swap(value_type_, other->value_type_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ReportRecord::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReportRecord_descriptor_;
  metadata.reflection = ReportRecord_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ReportRecord

// optional bytes key = 1;
void ReportRecord::clear_key() {
  key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& ReportRecord::key() const {
  // @@protoc_insertion_point(field_get:neb.ReportRecord.key)
  return key_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ReportRecord::set_key(const ::std::string& value) {
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:neb.ReportRecord.key)
}
 void ReportRecord::set_key(const char* value) {
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:neb.ReportRecord.key)
}
 void ReportRecord::set_key(const void* value, size_t size) {
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:neb.ReportRecord.key)
}
 ::std::string* ReportRecord::mutable_key() {
  
  // @@protoc_insertion_point(field_mutable:neb.ReportRecord.key)
  return key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* ReportRecord::release_key() {
  // @@protoc_insertion_point(field_release:neb.ReportRecord.key)
  
  return key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ReportRecord::set_allocated_key(::std::string* key) {
  if (key != NULL) {
    
  } else {
    
  }
  key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), key);
  // @@protoc_insertion_point(field_set_allocated:neb.ReportRecord.key)
}

// repeated uint64 value = 2;
int ReportRecord::value_size() const {
  return value_.size();
}
void ReportRecord::clear_value() {
  value_.Clear();
}
 ::google::protobuf::uint64 ReportRecord::value(int index) const {
  // @@protoc_insertion_point(field_get:neb.ReportRecord.value)
  return value_.Get(index);
}
 void ReportRecord::set_value(int index, ::google::protobuf::uint64 value) {
  value_.Set(index, value);
  // @@protoc_insertion_point(field_set:neb.ReportRecord.value)
}
 void ReportRecord::add_value(::google::protobuf::uint64 value) {
  value_.Add(value);
  // @@protoc_insertion_point(field_add:neb.ReportRecord.value)
}
 const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
ReportRecord::value() const {
  // @@protoc_insertion_point(field_list:neb.ReportRecord.value)
  return value_;
}
 ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
ReportRecord::mutable_value() {
  // @@protoc_insertion_point(field_mutable_list:neb.ReportRecord.value)
  return &value_;
}

// optional string item = 3;
void ReportRecord::clear_item() {
  item_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& ReportRecord::item() const {
  // @@protoc_insertion_point(field_get:neb.ReportRecord.item)
  return item_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ReportRecord::set_item(const ::std::string& value) {
  
  item_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:neb.ReportRecord.item)
}
 void ReportRecord::set_item(const char* value) {
  
  item_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:neb.ReportRecord.item)
}
 void ReportRecord::set_item(const char* value, size_t size) {
  
  item_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:neb.ReportRecord.item)
}
 ::std::string* ReportRecord::mutable_item() {
  
  // @@protoc_insertion_point(field_mutable:neb.ReportRecord.item)
  return item_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* ReportRecord::release_item() {
  // @@protoc_insertion_point(field_release:neb.ReportRecord.item)
  
  return item_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ReportRecord::set_allocated_item(::std::string* item) {
  if (item != NULL) {
    
  } else {
    
  }
  item_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), item);
  // @@protoc_insertion_point(field_set_allocated:neb.ReportRecord.item)
}

// optional .neb.ReportRecord.VALUE_TYPE value_type = 4;
void ReportRecord::clear_value_type() {
  value_type_ = 0;
}
 ::neb::ReportRecord_VALUE_TYPE ReportRecord::value_type() const {
  // @@protoc_insertion_point(field_get:neb.ReportRecord.value_type)
  return static_cast< ::neb::ReportRecord_VALUE_TYPE >(value_type_);
}
 void ReportRecord::set_value_type(::neb::ReportRecord_VALUE_TYPE value) {
  
  value_type_ = value;
  // @@protoc_insertion_point(field_set:neb.ReportRecord.value_type)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Report::kRecordsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Report::Report()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:neb.Report)
}

void Report::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

Report::Report(const Report& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:neb.Report)
}

void Report::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
}

Report::~Report() {
  // @@protoc_insertion_point(destructor:neb.Report)
  SharedDtor();
}

void Report::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Report::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Report::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Report_descriptor_;
}

const Report& Report::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_report_2eproto();
  return *default_instance_;
}

Report* Report::default_instance_ = NULL;

Report* Report::New(::google::protobuf::Arena* arena) const {
  Report* n = new Report;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Report::Clear() {
// @@protoc_insertion_point(message_clear_start:neb.Report)
  records_.Clear();
}

bool Report::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:neb.Report)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .neb.ReportRecord records = 1;
      case 1: {
        if (tag == 10) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_records:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_records()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_loop_records;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:neb.Report)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:neb.Report)
  return false;
#undef DO_
}

void Report::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:neb.Report)
  // repeated .neb.ReportRecord records = 1;
  for (unsigned int i = 0, n = this->records_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->records(i), output);
  }

  // @@protoc_insertion_point(serialize_end:neb.Report)
}

::google::protobuf::uint8* Report::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:neb.Report)
  // repeated .neb.ReportRecord records = 1;
  for (unsigned int i = 0, n = this->records_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->records(i), false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:neb.Report)
  return target;
}

int Report::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:neb.Report)
  int total_size = 0;

  // repeated .neb.ReportRecord records = 1;
  total_size += 1 * this->records_size();
  for (int i = 0; i < this->records_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->records(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Report::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:neb.Report)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const Report* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Report>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:neb.Report)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:neb.Report)
    MergeFrom(*source);
  }
}

void Report::MergeFrom(const Report& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:neb.Report)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  records_.MergeFrom(from.records_);
}

void Report::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:neb.Report)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Report::CopyFrom(const Report& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:neb.Report)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Report::IsInitialized() const {

  return true;
}

void Report::Swap(Report* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Report::InternalSwap(Report* other) {
  records_.UnsafeArenaSwap(&other->records_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Report::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Report_descriptor_;
  metadata.reflection = Report_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Report

// repeated .neb.ReportRecord records = 1;
int Report::records_size() const {
  return records_.size();
}
void Report::clear_records() {
  records_.Clear();
}
const ::neb::ReportRecord& Report::records(int index) const {
  // @@protoc_insertion_point(field_get:neb.Report.records)
  return records_.Get(index);
}
::neb::ReportRecord* Report::mutable_records(int index) {
  // @@protoc_insertion_point(field_mutable:neb.Report.records)
  return records_.Mutable(index);
}
::neb::ReportRecord* Report::add_records() {
  // @@protoc_insertion_point(field_add:neb.Report.records)
  return records_.Add();
}
::google::protobuf::RepeatedPtrField< ::neb::ReportRecord >*
Report::mutable_records() {
  // @@protoc_insertion_point(field_mutable_list:neb.Report.records)
  return &records_;
}
const ::google::protobuf::RepeatedPtrField< ::neb::ReportRecord >&
Report::records() const {
  // @@protoc_insertion_point(field_list:neb.Report.records)
  return records_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace neb

// @@protoc_insertion_point(global_scope)
