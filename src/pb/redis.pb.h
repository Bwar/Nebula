// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: redis.proto

#ifndef PROTOBUF_redis_2eproto__INCLUDED
#define PROTOBUF_redis_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3000000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3000000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace neb {

// Internal implementation detail -- do not call these.
void protobuf_AddDesc_redis_2eproto();
void protobuf_AssignDesc_redis_2eproto();
void protobuf_ShutdownFile_redis_2eproto();

class RedisReply;

enum E_REDIS_ERR {
  REDIS_OK = 0,
  REDIS_ERR_IO = 1,
  REDIS_ERR_OTHER = 2,
  REDIS_ERR_EOF = 3,
  REDIS_ERR_PROTOCOL = 4,
  REDIS_ERR_OOM = 5,
  REDIS_ERR = -1,
  E_REDIS_ERR_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  E_REDIS_ERR_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool E_REDIS_ERR_IsValid(int value);
const E_REDIS_ERR E_REDIS_ERR_MIN = REDIS_ERR;
const E_REDIS_ERR E_REDIS_ERR_MAX = REDIS_ERR_OOM;
const int E_REDIS_ERR_ARRAYSIZE = E_REDIS_ERR_MAX + 1;

const ::google::protobuf::EnumDescriptor* E_REDIS_ERR_descriptor();
inline const ::std::string& E_REDIS_ERR_Name(E_REDIS_ERR value) {
  return ::google::protobuf::internal::NameOfEnum(
    E_REDIS_ERR_descriptor(), value);
}
inline bool E_REDIS_ERR_Parse(
    const ::std::string& name, E_REDIS_ERR* value) {
  return ::google::protobuf::internal::ParseNamedEnum<E_REDIS_ERR>(
    E_REDIS_ERR_descriptor(), name, value);
}
enum E_REDIS_REPLY {
  REDIS_REPLY_UNDEFINE = 0,
  REDIS_REPLY_STRING = 1,
  REDIS_REPLY_ARRAY = 2,
  REDIS_REPLY_INTEGER = 3,
  REDIS_REPLY_NIL = 4,
  REDIS_REPLY_STATUS = 5,
  REDIS_REPLY_ERROR = 6,
  E_REDIS_REPLY_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  E_REDIS_REPLY_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool E_REDIS_REPLY_IsValid(int value);
const E_REDIS_REPLY E_REDIS_REPLY_MIN = REDIS_REPLY_UNDEFINE;
const E_REDIS_REPLY E_REDIS_REPLY_MAX = REDIS_REPLY_ERROR;
const int E_REDIS_REPLY_ARRAYSIZE = E_REDIS_REPLY_MAX + 1;

const ::google::protobuf::EnumDescriptor* E_REDIS_REPLY_descriptor();
inline const ::std::string& E_REDIS_REPLY_Name(E_REDIS_REPLY value) {
  return ::google::protobuf::internal::NameOfEnum(
    E_REDIS_REPLY_descriptor(), value);
}
inline bool E_REDIS_REPLY_Parse(
    const ::std::string& name, E_REDIS_REPLY* value) {
  return ::google::protobuf::internal::ParseNamedEnum<E_REDIS_REPLY>(
    E_REDIS_REPLY_descriptor(), name, value);
}
// ===================================================================

class RedisReply : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:neb.RedisReply) */ {
 public:
  RedisReply();
  virtual ~RedisReply();

  RedisReply(const RedisReply& from);

  inline RedisReply& operator=(const RedisReply& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RedisReply& default_instance();

  void Swap(RedisReply* other);

  // implements Message ----------------------------------------------

  inline RedisReply* New() const { return New(NULL); }

  RedisReply* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RedisReply& from);
  void MergeFrom(const RedisReply& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(RedisReply* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 type = 1;
  void clear_type();
  static const int kTypeFieldNumber = 1;
  ::google::protobuf::int32 type() const;
  void set_type(::google::protobuf::int32 value);

  // optional int64 integer = 2;
  void clear_integer();
  static const int kIntegerFieldNumber = 2;
  ::google::protobuf::int64 integer() const;
  void set_integer(::google::protobuf::int64 value);

  // optional bytes str = 3;
  void clear_str();
  static const int kStrFieldNumber = 3;
  const ::std::string& str() const;
  void set_str(const ::std::string& value);
  void set_str(const char* value);
  void set_str(const void* value, size_t size);
  ::std::string* mutable_str();
  ::std::string* release_str();
  void set_allocated_str(::std::string* str);

  // repeated .neb.RedisReply element = 4;
  int element_size() const;
  void clear_element();
  static const int kElementFieldNumber = 4;
  const ::neb::RedisReply& element(int index) const;
  ::neb::RedisReply* mutable_element(int index);
  ::neb::RedisReply* add_element();
  ::google::protobuf::RepeatedPtrField< ::neb::RedisReply >*
      mutable_element();
  const ::google::protobuf::RepeatedPtrField< ::neb::RedisReply >&
      element() const;

  // @@protoc_insertion_point(class_scope:neb.RedisReply)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::int64 integer_;
  ::google::protobuf::internal::ArenaStringPtr str_;
  ::google::protobuf::RepeatedPtrField< ::neb::RedisReply > element_;
  ::google::protobuf::int32 type_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_redis_2eproto();
  friend void protobuf_AssignDesc_redis_2eproto();
  friend void protobuf_ShutdownFile_redis_2eproto();

  void InitAsDefaultInstance();
  static RedisReply* default_instance_;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// RedisReply

// optional int32 type = 1;
inline void RedisReply::clear_type() {
  type_ = 0;
}
inline ::google::protobuf::int32 RedisReply::type() const {
  // @@protoc_insertion_point(field_get:neb.RedisReply.type)
  return type_;
}
inline void RedisReply::set_type(::google::protobuf::int32 value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:neb.RedisReply.type)
}

// optional int64 integer = 2;
inline void RedisReply::clear_integer() {
  integer_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 RedisReply::integer() const {
  // @@protoc_insertion_point(field_get:neb.RedisReply.integer)
  return integer_;
}
inline void RedisReply::set_integer(::google::protobuf::int64 value) {
  
  integer_ = value;
  // @@protoc_insertion_point(field_set:neb.RedisReply.integer)
}

// optional bytes str = 3;
inline void RedisReply::clear_str() {
  str_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& RedisReply::str() const {
  // @@protoc_insertion_point(field_get:neb.RedisReply.str)
  return str_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RedisReply::set_str(const ::std::string& value) {
  
  str_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:neb.RedisReply.str)
}
inline void RedisReply::set_str(const char* value) {
  
  str_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:neb.RedisReply.str)
}
inline void RedisReply::set_str(const void* value, size_t size) {
  
  str_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:neb.RedisReply.str)
}
inline ::std::string* RedisReply::mutable_str() {
  
  // @@protoc_insertion_point(field_mutable:neb.RedisReply.str)
  return str_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* RedisReply::release_str() {
  // @@protoc_insertion_point(field_release:neb.RedisReply.str)
  
  return str_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RedisReply::set_allocated_str(::std::string* str) {
  if (str != NULL) {
    
  } else {
    
  }
  str_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), str);
  // @@protoc_insertion_point(field_set_allocated:neb.RedisReply.str)
}

// repeated .neb.RedisReply element = 4;
inline int RedisReply::element_size() const {
  return element_.size();
}
inline void RedisReply::clear_element() {
  element_.Clear();
}
inline const ::neb::RedisReply& RedisReply::element(int index) const {
  // @@protoc_insertion_point(field_get:neb.RedisReply.element)
  return element_.Get(index);
}
inline ::neb::RedisReply* RedisReply::mutable_element(int index) {
  // @@protoc_insertion_point(field_mutable:neb.RedisReply.element)
  return element_.Mutable(index);
}
inline ::neb::RedisReply* RedisReply::add_element() {
  // @@protoc_insertion_point(field_add:neb.RedisReply.element)
  return element_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::neb::RedisReply >*
RedisReply::mutable_element() {
  // @@protoc_insertion_point(field_mutable_list:neb.RedisReply.element)
  return &element_;
}
inline const ::google::protobuf::RepeatedPtrField< ::neb::RedisReply >&
RedisReply::element() const {
  // @@protoc_insertion_point(field_list:neb.RedisReply.element)
  return element_;
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace neb

#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::neb::E_REDIS_ERR> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::neb::E_REDIS_ERR>() {
  return ::neb::E_REDIS_ERR_descriptor();
}
template <> struct is_proto_enum< ::neb::E_REDIS_REPLY> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::neb::E_REDIS_REPLY>() {
  return ::neb::E_REDIS_REPLY_descriptor();
}

}  // namespace protobuf
}  // namespace google
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_redis_2eproto__INCLUDED
