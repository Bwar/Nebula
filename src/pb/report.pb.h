// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: report.proto

#ifndef PROTOBUF_report_2eproto__INCLUDED
#define PROTOBUF_report_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3000000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3000000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace neb {

// Internal implementation detail -- do not call these.
void protobuf_AddDesc_report_2eproto();
void protobuf_AssignDesc_report_2eproto();
void protobuf_ShutdownFile_report_2eproto();

class Report;
class ReportRecord;

enum ReportRecord_VALUE_TYPE {
  ReportRecord_VALUE_TYPE_VALUE_ACC = 0,
  ReportRecord_VALUE_TYPE_VALUE_FIXED = 1,
  ReportRecord_VALUE_TYPE_ReportRecord_VALUE_TYPE_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  ReportRecord_VALUE_TYPE_ReportRecord_VALUE_TYPE_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool ReportRecord_VALUE_TYPE_IsValid(int value);
const ReportRecord_VALUE_TYPE ReportRecord_VALUE_TYPE_VALUE_TYPE_MIN = ReportRecord_VALUE_TYPE_VALUE_ACC;
const ReportRecord_VALUE_TYPE ReportRecord_VALUE_TYPE_VALUE_TYPE_MAX = ReportRecord_VALUE_TYPE_VALUE_FIXED;
const int ReportRecord_VALUE_TYPE_VALUE_TYPE_ARRAYSIZE = ReportRecord_VALUE_TYPE_VALUE_TYPE_MAX + 1;

const ::google::protobuf::EnumDescriptor* ReportRecord_VALUE_TYPE_descriptor();
inline const ::std::string& ReportRecord_VALUE_TYPE_Name(ReportRecord_VALUE_TYPE value) {
  return ::google::protobuf::internal::NameOfEnum(
    ReportRecord_VALUE_TYPE_descriptor(), value);
}
inline bool ReportRecord_VALUE_TYPE_Parse(
    const ::std::string& name, ReportRecord_VALUE_TYPE* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ReportRecord_VALUE_TYPE>(
    ReportRecord_VALUE_TYPE_descriptor(), name, value);
}
// ===================================================================

class ReportRecord : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:neb.ReportRecord) */ {
 public:
  ReportRecord();
  virtual ~ReportRecord();

  ReportRecord(const ReportRecord& from);

  inline ReportRecord& operator=(const ReportRecord& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ReportRecord& default_instance();

  void Swap(ReportRecord* other);

  // implements Message ----------------------------------------------

  inline ReportRecord* New() const { return New(NULL); }

  ReportRecord* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ReportRecord& from);
  void MergeFrom(const ReportRecord& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ReportRecord* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef ReportRecord_VALUE_TYPE VALUE_TYPE;
  static const VALUE_TYPE VALUE_ACC =
    ReportRecord_VALUE_TYPE_VALUE_ACC;
  static const VALUE_TYPE VALUE_FIXED =
    ReportRecord_VALUE_TYPE_VALUE_FIXED;
  static inline bool VALUE_TYPE_IsValid(int value) {
    return ReportRecord_VALUE_TYPE_IsValid(value);
  }
  static const VALUE_TYPE VALUE_TYPE_MIN =
    ReportRecord_VALUE_TYPE_VALUE_TYPE_MIN;
  static const VALUE_TYPE VALUE_TYPE_MAX =
    ReportRecord_VALUE_TYPE_VALUE_TYPE_MAX;
  static const int VALUE_TYPE_ARRAYSIZE =
    ReportRecord_VALUE_TYPE_VALUE_TYPE_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  VALUE_TYPE_descriptor() {
    return ReportRecord_VALUE_TYPE_descriptor();
  }
  static inline const ::std::string& VALUE_TYPE_Name(VALUE_TYPE value) {
    return ReportRecord_VALUE_TYPE_Name(value);
  }
  static inline bool VALUE_TYPE_Parse(const ::std::string& name,
      VALUE_TYPE* value) {
    return ReportRecord_VALUE_TYPE_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional bytes key = 1;
  void clear_key();
  static const int kKeyFieldNumber = 1;
  const ::std::string& key() const;
  void set_key(const ::std::string& value);
  void set_key(const char* value);
  void set_key(const void* value, size_t size);
  ::std::string* mutable_key();
  ::std::string* release_key();
  void set_allocated_key(::std::string* key);

  // repeated uint64 value = 2;
  int value_size() const;
  void clear_value();
  static const int kValueFieldNumber = 2;
  ::google::protobuf::uint64 value(int index) const;
  void set_value(int index, ::google::protobuf::uint64 value);
  void add_value(::google::protobuf::uint64 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
      value() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
      mutable_value();

  // optional string item = 3;
  void clear_item();
  static const int kItemFieldNumber = 3;
  const ::std::string& item() const;
  void set_item(const ::std::string& value);
  void set_item(const char* value);
  void set_item(const char* value, size_t size);
  ::std::string* mutable_item();
  ::std::string* release_item();
  void set_allocated_item(::std::string* item);

  // optional .neb.ReportRecord.VALUE_TYPE value_type = 4;
  void clear_value_type();
  static const int kValueTypeFieldNumber = 4;
  ::neb::ReportRecord_VALUE_TYPE value_type() const;
  void set_value_type(::neb::ReportRecord_VALUE_TYPE value);

  // @@protoc_insertion_point(class_scope:neb.ReportRecord)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::internal::ArenaStringPtr key_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint64 > value_;
  mutable int _value_cached_byte_size_;
  ::google::protobuf::internal::ArenaStringPtr item_;
  int value_type_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_report_2eproto();
  friend void protobuf_AssignDesc_report_2eproto();
  friend void protobuf_ShutdownFile_report_2eproto();

  void InitAsDefaultInstance();
  static ReportRecord* default_instance_;
};
// -------------------------------------------------------------------

class Report : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:neb.Report) */ {
 public:
  Report();
  virtual ~Report();

  Report(const Report& from);

  inline Report& operator=(const Report& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Report& default_instance();

  void Swap(Report* other);

  // implements Message ----------------------------------------------

  inline Report* New() const { return New(NULL); }

  Report* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Report& from);
  void MergeFrom(const Report& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Report* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .neb.ReportRecord records = 1;
  int records_size() const;
  void clear_records();
  static const int kRecordsFieldNumber = 1;
  const ::neb::ReportRecord& records(int index) const;
  ::neb::ReportRecord* mutable_records(int index);
  ::neb::ReportRecord* add_records();
  ::google::protobuf::RepeatedPtrField< ::neb::ReportRecord >*
      mutable_records();
  const ::google::protobuf::RepeatedPtrField< ::neb::ReportRecord >&
      records() const;

  // @@protoc_insertion_point(class_scope:neb.Report)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::RepeatedPtrField< ::neb::ReportRecord > records_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_report_2eproto();
  friend void protobuf_AssignDesc_report_2eproto();
  friend void protobuf_ShutdownFile_report_2eproto();

  void InitAsDefaultInstance();
  static Report* default_instance_;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// ReportRecord

// optional bytes key = 1;
inline void ReportRecord::clear_key() {
  key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ReportRecord::key() const {
  // @@protoc_insertion_point(field_get:neb.ReportRecord.key)
  return key_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ReportRecord::set_key(const ::std::string& value) {
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:neb.ReportRecord.key)
}
inline void ReportRecord::set_key(const char* value) {
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:neb.ReportRecord.key)
}
inline void ReportRecord::set_key(const void* value, size_t size) {
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:neb.ReportRecord.key)
}
inline ::std::string* ReportRecord::mutable_key() {
  
  // @@protoc_insertion_point(field_mutable:neb.ReportRecord.key)
  return key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ReportRecord::release_key() {
  // @@protoc_insertion_point(field_release:neb.ReportRecord.key)
  
  return key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ReportRecord::set_allocated_key(::std::string* key) {
  if (key != NULL) {
    
  } else {
    
  }
  key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), key);
  // @@protoc_insertion_point(field_set_allocated:neb.ReportRecord.key)
}

// repeated uint64 value = 2;
inline int ReportRecord::value_size() const {
  return value_.size();
}
inline void ReportRecord::clear_value() {
  value_.Clear();
}
inline ::google::protobuf::uint64 ReportRecord::value(int index) const {
  // @@protoc_insertion_point(field_get:neb.ReportRecord.value)
  return value_.Get(index);
}
inline void ReportRecord::set_value(int index, ::google::protobuf::uint64 value) {
  value_.Set(index, value);
  // @@protoc_insertion_point(field_set:neb.ReportRecord.value)
}
inline void ReportRecord::add_value(::google::protobuf::uint64 value) {
  value_.Add(value);
  // @@protoc_insertion_point(field_add:neb.ReportRecord.value)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
ReportRecord::value() const {
  // @@protoc_insertion_point(field_list:neb.ReportRecord.value)
  return value_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
ReportRecord::mutable_value() {
  // @@protoc_insertion_point(field_mutable_list:neb.ReportRecord.value)
  return &value_;
}

// optional string item = 3;
inline void ReportRecord::clear_item() {
  item_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ReportRecord::item() const {
  // @@protoc_insertion_point(field_get:neb.ReportRecord.item)
  return item_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ReportRecord::set_item(const ::std::string& value) {
  
  item_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:neb.ReportRecord.item)
}
inline void ReportRecord::set_item(const char* value) {
  
  item_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:neb.ReportRecord.item)
}
inline void ReportRecord::set_item(const char* value, size_t size) {
  
  item_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:neb.ReportRecord.item)
}
inline ::std::string* ReportRecord::mutable_item() {
  
  // @@protoc_insertion_point(field_mutable:neb.ReportRecord.item)
  return item_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ReportRecord::release_item() {
  // @@protoc_insertion_point(field_release:neb.ReportRecord.item)
  
  return item_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ReportRecord::set_allocated_item(::std::string* item) {
  if (item != NULL) {
    
  } else {
    
  }
  item_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), item);
  // @@protoc_insertion_point(field_set_allocated:neb.ReportRecord.item)
}

// optional .neb.ReportRecord.VALUE_TYPE value_type = 4;
inline void ReportRecord::clear_value_type() {
  value_type_ = 0;
}
inline ::neb::ReportRecord_VALUE_TYPE ReportRecord::value_type() const {
  // @@protoc_insertion_point(field_get:neb.ReportRecord.value_type)
  return static_cast< ::neb::ReportRecord_VALUE_TYPE >(value_type_);
}
inline void ReportRecord::set_value_type(::neb::ReportRecord_VALUE_TYPE value) {
  
  value_type_ = value;
  // @@protoc_insertion_point(field_set:neb.ReportRecord.value_type)
}

// -------------------------------------------------------------------

// Report

// repeated .neb.ReportRecord records = 1;
inline int Report::records_size() const {
  return records_.size();
}
inline void Report::clear_records() {
  records_.Clear();
}
inline const ::neb::ReportRecord& Report::records(int index) const {
  // @@protoc_insertion_point(field_get:neb.Report.records)
  return records_.Get(index);
}
inline ::neb::ReportRecord* Report::mutable_records(int index) {
  // @@protoc_insertion_point(field_mutable:neb.Report.records)
  return records_.Mutable(index);
}
inline ::neb::ReportRecord* Report::add_records() {
  // @@protoc_insertion_point(field_add:neb.Report.records)
  return records_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::neb::ReportRecord >*
Report::mutable_records() {
  // @@protoc_insertion_point(field_mutable_list:neb.Report.records)
  return &records_;
}
inline const ::google::protobuf::RepeatedPtrField< ::neb::ReportRecord >&
Report::records() const {
  // @@protoc_insertion_point(field_list:neb.Report.records)
  return records_;
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace neb

#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::neb::ReportRecord_VALUE_TYPE> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::neb::ReportRecord_VALUE_TYPE>() {
  return ::neb::ReportRecord_VALUE_TYPE_descriptor();
}

}  // namespace protobuf
}  // namespace google
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_report_2eproto__INCLUDED
