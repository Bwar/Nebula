// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: neb_sys.proto

#ifndef PROTOBUF_neb_5fsys_2eproto__INCLUDED
#define PROTOBUF_neb_5fsys_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3000000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3000000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace neb {

// Internal implementation detail -- do not call these.
void protobuf_AddDesc_neb_5fsys_2eproto();
void protobuf_AssignDesc_neb_5fsys_2eproto();
void protobuf_ShutdownFile_neb_5fsys_2eproto();

class ConfigInfo;
class FdTransfer;
class LogLevel;
class SpecChannelInfo;
class TargetWorker;
class TraceLog;
class WorkerLoad;

// ===================================================================

class ConfigInfo : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:neb.ConfigInfo) */ {
 public:
  ConfigInfo();
  virtual ~ConfigInfo();

  ConfigInfo(const ConfigInfo& from);

  inline ConfigInfo& operator=(const ConfigInfo& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ConfigInfo& default_instance();

  void Swap(ConfigInfo* other);

  // implements Message ----------------------------------------------

  inline ConfigInfo* New() const { return New(NULL); }

  ConfigInfo* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ConfigInfo& from);
  void MergeFrom(const ConfigInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ConfigInfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string file_name = 1;
  void clear_file_name();
  static const int kFileNameFieldNumber = 1;
  const ::std::string& file_name() const;
  void set_file_name(const ::std::string& value);
  void set_file_name(const char* value);
  void set_file_name(const char* value, size_t size);
  ::std::string* mutable_file_name();
  ::std::string* release_file_name();
  void set_allocated_file_name(::std::string* file_name);

  // optional string file_content = 2;
  void clear_file_content();
  static const int kFileContentFieldNumber = 2;
  const ::std::string& file_content() const;
  void set_file_content(const ::std::string& value);
  void set_file_content(const char* value);
  void set_file_content(const char* value, size_t size);
  ::std::string* mutable_file_content();
  ::std::string* release_file_content();
  void set_allocated_file_content(::std::string* file_content);

  // optional string file_path = 3;
  void clear_file_path();
  static const int kFilePathFieldNumber = 3;
  const ::std::string& file_path() const;
  void set_file_path(const ::std::string& value);
  void set_file_path(const char* value);
  void set_file_path(const char* value, size_t size);
  ::std::string* mutable_file_path();
  ::std::string* release_file_path();
  void set_allocated_file_path(::std::string* file_path);

  // @@protoc_insertion_point(class_scope:neb.ConfigInfo)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::internal::ArenaStringPtr file_name_;
  ::google::protobuf::internal::ArenaStringPtr file_content_;
  ::google::protobuf::internal::ArenaStringPtr file_path_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_neb_5fsys_2eproto();
  friend void protobuf_AssignDesc_neb_5fsys_2eproto();
  friend void protobuf_ShutdownFile_neb_5fsys_2eproto();

  void InitAsDefaultInstance();
  static ConfigInfo* default_instance_;
};
// -------------------------------------------------------------------

class WorkerLoad : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:neb.WorkerLoad) */ {
 public:
  WorkerLoad();
  virtual ~WorkerLoad();

  WorkerLoad(const WorkerLoad& from);

  inline WorkerLoad& operator=(const WorkerLoad& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const WorkerLoad& default_instance();

  void Swap(WorkerLoad* other);

  // implements Message ----------------------------------------------

  inline WorkerLoad* New() const { return New(NULL); }

  WorkerLoad* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const WorkerLoad& from);
  void MergeFrom(const WorkerLoad& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(WorkerLoad* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 pid = 1;
  void clear_pid();
  static const int kPidFieldNumber = 1;
  ::google::protobuf::int32 pid() const;
  void set_pid(::google::protobuf::int32 value);

  // optional int32 load = 2;
  void clear_load();
  static const int kLoadFieldNumber = 2;
  ::google::protobuf::int32 load() const;
  void set_load(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:neb.WorkerLoad)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::int32 pid_;
  ::google::protobuf::int32 load_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_neb_5fsys_2eproto();
  friend void protobuf_AssignDesc_neb_5fsys_2eproto();
  friend void protobuf_ShutdownFile_neb_5fsys_2eproto();

  void InitAsDefaultInstance();
  static WorkerLoad* default_instance_;
};
// -------------------------------------------------------------------

class TargetWorker : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:neb.TargetWorker) */ {
 public:
  TargetWorker();
  virtual ~TargetWorker();

  TargetWorker(const TargetWorker& from);

  inline TargetWorker& operator=(const TargetWorker& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TargetWorker& default_instance();

  void Swap(TargetWorker* other);

  // implements Message ----------------------------------------------

  inline TargetWorker* New() const { return New(NULL); }

  TargetWorker* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TargetWorker& from);
  void MergeFrom(const TargetWorker& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(TargetWorker* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string worker_identify = 1;
  void clear_worker_identify();
  static const int kWorkerIdentifyFieldNumber = 1;
  const ::std::string& worker_identify() const;
  void set_worker_identify(const ::std::string& value);
  void set_worker_identify(const char* value);
  void set_worker_identify(const char* value, size_t size);
  ::std::string* mutable_worker_identify();
  ::std::string* release_worker_identify();
  void set_allocated_worker_identify(::std::string* worker_identify);

  // optional string node_type = 2;
  void clear_node_type();
  static const int kNodeTypeFieldNumber = 2;
  const ::std::string& node_type() const;
  void set_node_type(const ::std::string& value);
  void set_node_type(const char* value);
  void set_node_type(const char* value, size_t size);
  ::std::string* mutable_node_type();
  ::std::string* release_node_type();
  void set_allocated_node_type(::std::string* node_type);

  // @@protoc_insertion_point(class_scope:neb.TargetWorker)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::internal::ArenaStringPtr worker_identify_;
  ::google::protobuf::internal::ArenaStringPtr node_type_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_neb_5fsys_2eproto();
  friend void protobuf_AssignDesc_neb_5fsys_2eproto();
  friend void protobuf_ShutdownFile_neb_5fsys_2eproto();

  void InitAsDefaultInstance();
  static TargetWorker* default_instance_;
};
// -------------------------------------------------------------------

class LogLevel : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:neb.LogLevel) */ {
 public:
  LogLevel();
  virtual ~LogLevel();

  LogLevel(const LogLevel& from);

  inline LogLevel& operator=(const LogLevel& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const LogLevel& default_instance();

  void Swap(LogLevel* other);

  // implements Message ----------------------------------------------

  inline LogLevel* New() const { return New(NULL); }

  LogLevel* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const LogLevel& from);
  void MergeFrom(const LogLevel& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(LogLevel* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 log_level = 1;
  void clear_log_level();
  static const int kLogLevelFieldNumber = 1;
  ::google::protobuf::int32 log_level() const;
  void set_log_level(::google::protobuf::int32 value);

  // optional int32 net_log_level = 2;
  void clear_net_log_level();
  static const int kNetLogLevelFieldNumber = 2;
  ::google::protobuf::int32 net_log_level() const;
  void set_net_log_level(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:neb.LogLevel)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::int32 log_level_;
  ::google::protobuf::int32 net_log_level_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_neb_5fsys_2eproto();
  friend void protobuf_AssignDesc_neb_5fsys_2eproto();
  friend void protobuf_ShutdownFile_neb_5fsys_2eproto();

  void InitAsDefaultInstance();
  static LogLevel* default_instance_;
};
// -------------------------------------------------------------------

class TraceLog : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:neb.TraceLog) */ {
 public:
  TraceLog();
  virtual ~TraceLog();

  TraceLog(const TraceLog& from);

  inline TraceLog& operator=(const TraceLog& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TraceLog& default_instance();

  void Swap(TraceLog* other);

  // implements Message ----------------------------------------------

  inline TraceLog* New() const { return New(NULL); }

  TraceLog* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TraceLog& from);
  void MergeFrom(const TraceLog& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(TraceLog* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string log_time = 1;
  void clear_log_time();
  static const int kLogTimeFieldNumber = 1;
  const ::std::string& log_time() const;
  void set_log_time(const ::std::string& value);
  void set_log_time(const char* value);
  void set_log_time(const char* value, size_t size);
  ::std::string* mutable_log_time();
  ::std::string* release_log_time();
  void set_allocated_log_time(::std::string* log_time);

  // optional string node_type = 2;
  void clear_node_type();
  static const int kNodeTypeFieldNumber = 2;
  const ::std::string& node_type() const;
  void set_node_type(const ::std::string& value);
  void set_node_type(const char* value);
  void set_node_type(const char* value, size_t size);
  ::std::string* mutable_node_type();
  ::std::string* release_node_type();
  void set_allocated_node_type(::std::string* node_type);

  // optional string node_identify = 3;
  void clear_node_identify();
  static const int kNodeIdentifyFieldNumber = 3;
  const ::std::string& node_identify() const;
  void set_node_identify(const ::std::string& value);
  void set_node_identify(const char* value);
  void set_node_identify(const char* value, size_t size);
  ::std::string* mutable_node_identify();
  ::std::string* release_node_identify();
  void set_allocated_node_identify(::std::string* node_identify);

  // optional string log_level = 4;
  void clear_log_level();
  static const int kLogLevelFieldNumber = 4;
  const ::std::string& log_level() const;
  void set_log_level(const ::std::string& value);
  void set_log_level(const char* value);
  void set_log_level(const char* value, size_t size);
  ::std::string* mutable_log_level();
  ::std::string* release_log_level();
  void set_allocated_log_level(::std::string* log_level);

  // optional string code_file_name = 5;
  void clear_code_file_name();
  static const int kCodeFileNameFieldNumber = 5;
  const ::std::string& code_file_name() const;
  void set_code_file_name(const ::std::string& value);
  void set_code_file_name(const char* value);
  void set_code_file_name(const char* value, size_t size);
  ::std::string* mutable_code_file_name();
  ::std::string* release_code_file_name();
  void set_allocated_code_file_name(::std::string* code_file_name);

  // optional uint32 code_file_line = 6;
  void clear_code_file_line();
  static const int kCodeFileLineFieldNumber = 6;
  ::google::protobuf::uint32 code_file_line() const;
  void set_code_file_line(::google::protobuf::uint32 value);

  // optional string code_function = 7;
  void clear_code_function();
  static const int kCodeFunctionFieldNumber = 7;
  const ::std::string& code_function() const;
  void set_code_function(const ::std::string& value);
  void set_code_function(const char* value);
  void set_code_function(const char* value, size_t size);
  ::std::string* mutable_code_function();
  ::std::string* release_code_function();
  void set_allocated_code_function(::std::string* code_function);

  // optional bytes log_content = 8;
  void clear_log_content();
  static const int kLogContentFieldNumber = 8;
  const ::std::string& log_content() const;
  void set_log_content(const ::std::string& value);
  void set_log_content(const char* value);
  void set_log_content(const void* value, size_t size);
  ::std::string* mutable_log_content();
  ::std::string* release_log_content();
  void set_allocated_log_content(::std::string* log_content);

  // @@protoc_insertion_point(class_scope:neb.TraceLog)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::internal::ArenaStringPtr log_time_;
  ::google::protobuf::internal::ArenaStringPtr node_type_;
  ::google::protobuf::internal::ArenaStringPtr node_identify_;
  ::google::protobuf::internal::ArenaStringPtr log_level_;
  ::google::protobuf::internal::ArenaStringPtr code_file_name_;
  ::google::protobuf::internal::ArenaStringPtr code_function_;
  ::google::protobuf::internal::ArenaStringPtr log_content_;
  ::google::protobuf::uint32 code_file_line_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_neb_5fsys_2eproto();
  friend void protobuf_AssignDesc_neb_5fsys_2eproto();
  friend void protobuf_ShutdownFile_neb_5fsys_2eproto();

  void InitAsDefaultInstance();
  static TraceLog* default_instance_;
};
// -------------------------------------------------------------------

class SpecChannelInfo : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:neb.SpecChannelInfo) */ {
 public:
  SpecChannelInfo();
  virtual ~SpecChannelInfo();

  SpecChannelInfo(const SpecChannelInfo& from);

  inline SpecChannelInfo& operator=(const SpecChannelInfo& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SpecChannelInfo& default_instance();

  void Swap(SpecChannelInfo* other);

  // implements Message ----------------------------------------------

  inline SpecChannelInfo* New() const { return New(NULL); }

  SpecChannelInfo* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SpecChannelInfo& from);
  void MergeFrom(const SpecChannelInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(SpecChannelInfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 codec_type = 1;
  void clear_codec_type();
  static const int kCodecTypeFieldNumber = 1;
  ::google::protobuf::uint32 codec_type() const;
  void set_codec_type(::google::protobuf::uint32 value);

  // optional uint32 from_labor = 2;
  void clear_from_labor();
  static const int kFromLaborFieldNumber = 2;
  ::google::protobuf::uint32 from_labor() const;
  void set_from_labor(::google::protobuf::uint32 value);

  // optional uint32 to_labor = 3;
  void clear_to_labor();
  static const int kToLaborFieldNumber = 3;
  ::google::protobuf::uint32 to_labor() const;
  void set_to_labor(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:neb.SpecChannelInfo)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::uint32 codec_type_;
  ::google::protobuf::uint32 from_labor_;
  ::google::protobuf::uint32 to_labor_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_neb_5fsys_2eproto();
  friend void protobuf_AssignDesc_neb_5fsys_2eproto();
  friend void protobuf_ShutdownFile_neb_5fsys_2eproto();

  void InitAsDefaultInstance();
  static SpecChannelInfo* default_instance_;
};
// -------------------------------------------------------------------

class FdTransfer : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:neb.FdTransfer) */ {
 public:
  FdTransfer();
  virtual ~FdTransfer();

  FdTransfer(const FdTransfer& from);

  inline FdTransfer& operator=(const FdTransfer& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FdTransfer& default_instance();

  void Swap(FdTransfer* other);

  // implements Message ----------------------------------------------

  inline FdTransfer* New() const { return New(NULL); }

  FdTransfer* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const FdTransfer& from);
  void MergeFrom(const FdTransfer& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(FdTransfer* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 fd = 1;
  void clear_fd();
  static const int kFdFieldNumber = 1;
  ::google::protobuf::int32 fd() const;
  void set_fd(::google::protobuf::int32 value);

  // optional int32 addr_family = 2;
  void clear_addr_family();
  static const int kAddrFamilyFieldNumber = 2;
  ::google::protobuf::int32 addr_family() const;
  void set_addr_family(::google::protobuf::int32 value);

  // optional string client_addr = 3;
  void clear_client_addr();
  static const int kClientAddrFieldNumber = 3;
  const ::std::string& client_addr() const;
  void set_client_addr(const ::std::string& value);
  void set_client_addr(const char* value);
  void set_client_addr(const char* value, size_t size);
  ::std::string* mutable_client_addr();
  ::std::string* release_client_addr();
  void set_allocated_client_addr(::std::string* client_addr);

  // optional int32 client_port = 4;
  void clear_client_port();
  static const int kClientPortFieldNumber = 4;
  ::google::protobuf::int32 client_port() const;
  void set_client_port(::google::protobuf::int32 value);

  // optional int32 codec_type = 5;
  void clear_codec_type();
  static const int kCodecTypeFieldNumber = 5;
  ::google::protobuf::int32 codec_type() const;
  void set_codec_type(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:neb.FdTransfer)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::int32 fd_;
  ::google::protobuf::int32 addr_family_;
  ::google::protobuf::internal::ArenaStringPtr client_addr_;
  ::google::protobuf::int32 client_port_;
  ::google::protobuf::int32 codec_type_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_neb_5fsys_2eproto();
  friend void protobuf_AssignDesc_neb_5fsys_2eproto();
  friend void protobuf_ShutdownFile_neb_5fsys_2eproto();

  void InitAsDefaultInstance();
  static FdTransfer* default_instance_;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// ConfigInfo

// optional string file_name = 1;
inline void ConfigInfo::clear_file_name() {
  file_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ConfigInfo::file_name() const {
  // @@protoc_insertion_point(field_get:neb.ConfigInfo.file_name)
  return file_name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ConfigInfo::set_file_name(const ::std::string& value) {
  
  file_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:neb.ConfigInfo.file_name)
}
inline void ConfigInfo::set_file_name(const char* value) {
  
  file_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:neb.ConfigInfo.file_name)
}
inline void ConfigInfo::set_file_name(const char* value, size_t size) {
  
  file_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:neb.ConfigInfo.file_name)
}
inline ::std::string* ConfigInfo::mutable_file_name() {
  
  // @@protoc_insertion_point(field_mutable:neb.ConfigInfo.file_name)
  return file_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ConfigInfo::release_file_name() {
  // @@protoc_insertion_point(field_release:neb.ConfigInfo.file_name)
  
  return file_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ConfigInfo::set_allocated_file_name(::std::string* file_name) {
  if (file_name != NULL) {
    
  } else {
    
  }
  file_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), file_name);
  // @@protoc_insertion_point(field_set_allocated:neb.ConfigInfo.file_name)
}

// optional string file_content = 2;
inline void ConfigInfo::clear_file_content() {
  file_content_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ConfigInfo::file_content() const {
  // @@protoc_insertion_point(field_get:neb.ConfigInfo.file_content)
  return file_content_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ConfigInfo::set_file_content(const ::std::string& value) {
  
  file_content_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:neb.ConfigInfo.file_content)
}
inline void ConfigInfo::set_file_content(const char* value) {
  
  file_content_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:neb.ConfigInfo.file_content)
}
inline void ConfigInfo::set_file_content(const char* value, size_t size) {
  
  file_content_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:neb.ConfigInfo.file_content)
}
inline ::std::string* ConfigInfo::mutable_file_content() {
  
  // @@protoc_insertion_point(field_mutable:neb.ConfigInfo.file_content)
  return file_content_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ConfigInfo::release_file_content() {
  // @@protoc_insertion_point(field_release:neb.ConfigInfo.file_content)
  
  return file_content_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ConfigInfo::set_allocated_file_content(::std::string* file_content) {
  if (file_content != NULL) {
    
  } else {
    
  }
  file_content_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), file_content);
  // @@protoc_insertion_point(field_set_allocated:neb.ConfigInfo.file_content)
}

// optional string file_path = 3;
inline void ConfigInfo::clear_file_path() {
  file_path_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ConfigInfo::file_path() const {
  // @@protoc_insertion_point(field_get:neb.ConfigInfo.file_path)
  return file_path_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ConfigInfo::set_file_path(const ::std::string& value) {
  
  file_path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:neb.ConfigInfo.file_path)
}
inline void ConfigInfo::set_file_path(const char* value) {
  
  file_path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:neb.ConfigInfo.file_path)
}
inline void ConfigInfo::set_file_path(const char* value, size_t size) {
  
  file_path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:neb.ConfigInfo.file_path)
}
inline ::std::string* ConfigInfo::mutable_file_path() {
  
  // @@protoc_insertion_point(field_mutable:neb.ConfigInfo.file_path)
  return file_path_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ConfigInfo::release_file_path() {
  // @@protoc_insertion_point(field_release:neb.ConfigInfo.file_path)
  
  return file_path_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ConfigInfo::set_allocated_file_path(::std::string* file_path) {
  if (file_path != NULL) {
    
  } else {
    
  }
  file_path_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), file_path);
  // @@protoc_insertion_point(field_set_allocated:neb.ConfigInfo.file_path)
}

// -------------------------------------------------------------------

// WorkerLoad

// optional int32 pid = 1;
inline void WorkerLoad::clear_pid() {
  pid_ = 0;
}
inline ::google::protobuf::int32 WorkerLoad::pid() const {
  // @@protoc_insertion_point(field_get:neb.WorkerLoad.pid)
  return pid_;
}
inline void WorkerLoad::set_pid(::google::protobuf::int32 value) {
  
  pid_ = value;
  // @@protoc_insertion_point(field_set:neb.WorkerLoad.pid)
}

// optional int32 load = 2;
inline void WorkerLoad::clear_load() {
  load_ = 0;
}
inline ::google::protobuf::int32 WorkerLoad::load() const {
  // @@protoc_insertion_point(field_get:neb.WorkerLoad.load)
  return load_;
}
inline void WorkerLoad::set_load(::google::protobuf::int32 value) {
  
  load_ = value;
  // @@protoc_insertion_point(field_set:neb.WorkerLoad.load)
}

// -------------------------------------------------------------------

// TargetWorker

// optional string worker_identify = 1;
inline void TargetWorker::clear_worker_identify() {
  worker_identify_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& TargetWorker::worker_identify() const {
  // @@protoc_insertion_point(field_get:neb.TargetWorker.worker_identify)
  return worker_identify_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TargetWorker::set_worker_identify(const ::std::string& value) {
  
  worker_identify_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:neb.TargetWorker.worker_identify)
}
inline void TargetWorker::set_worker_identify(const char* value) {
  
  worker_identify_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:neb.TargetWorker.worker_identify)
}
inline void TargetWorker::set_worker_identify(const char* value, size_t size) {
  
  worker_identify_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:neb.TargetWorker.worker_identify)
}
inline ::std::string* TargetWorker::mutable_worker_identify() {
  
  // @@protoc_insertion_point(field_mutable:neb.TargetWorker.worker_identify)
  return worker_identify_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TargetWorker::release_worker_identify() {
  // @@protoc_insertion_point(field_release:neb.TargetWorker.worker_identify)
  
  return worker_identify_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TargetWorker::set_allocated_worker_identify(::std::string* worker_identify) {
  if (worker_identify != NULL) {
    
  } else {
    
  }
  worker_identify_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), worker_identify);
  // @@protoc_insertion_point(field_set_allocated:neb.TargetWorker.worker_identify)
}

// optional string node_type = 2;
inline void TargetWorker::clear_node_type() {
  node_type_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& TargetWorker::node_type() const {
  // @@protoc_insertion_point(field_get:neb.TargetWorker.node_type)
  return node_type_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TargetWorker::set_node_type(const ::std::string& value) {
  
  node_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:neb.TargetWorker.node_type)
}
inline void TargetWorker::set_node_type(const char* value) {
  
  node_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:neb.TargetWorker.node_type)
}
inline void TargetWorker::set_node_type(const char* value, size_t size) {
  
  node_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:neb.TargetWorker.node_type)
}
inline ::std::string* TargetWorker::mutable_node_type() {
  
  // @@protoc_insertion_point(field_mutable:neb.TargetWorker.node_type)
  return node_type_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TargetWorker::release_node_type() {
  // @@protoc_insertion_point(field_release:neb.TargetWorker.node_type)
  
  return node_type_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TargetWorker::set_allocated_node_type(::std::string* node_type) {
  if (node_type != NULL) {
    
  } else {
    
  }
  node_type_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), node_type);
  // @@protoc_insertion_point(field_set_allocated:neb.TargetWorker.node_type)
}

// -------------------------------------------------------------------

// LogLevel

// optional int32 log_level = 1;
inline void LogLevel::clear_log_level() {
  log_level_ = 0;
}
inline ::google::protobuf::int32 LogLevel::log_level() const {
  // @@protoc_insertion_point(field_get:neb.LogLevel.log_level)
  return log_level_;
}
inline void LogLevel::set_log_level(::google::protobuf::int32 value) {
  
  log_level_ = value;
  // @@protoc_insertion_point(field_set:neb.LogLevel.log_level)
}

// optional int32 net_log_level = 2;
inline void LogLevel::clear_net_log_level() {
  net_log_level_ = 0;
}
inline ::google::protobuf::int32 LogLevel::net_log_level() const {
  // @@protoc_insertion_point(field_get:neb.LogLevel.net_log_level)
  return net_log_level_;
}
inline void LogLevel::set_net_log_level(::google::protobuf::int32 value) {
  
  net_log_level_ = value;
  // @@protoc_insertion_point(field_set:neb.LogLevel.net_log_level)
}

// -------------------------------------------------------------------

// TraceLog

// optional string log_time = 1;
inline void TraceLog::clear_log_time() {
  log_time_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& TraceLog::log_time() const {
  // @@protoc_insertion_point(field_get:neb.TraceLog.log_time)
  return log_time_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TraceLog::set_log_time(const ::std::string& value) {
  
  log_time_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:neb.TraceLog.log_time)
}
inline void TraceLog::set_log_time(const char* value) {
  
  log_time_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:neb.TraceLog.log_time)
}
inline void TraceLog::set_log_time(const char* value, size_t size) {
  
  log_time_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:neb.TraceLog.log_time)
}
inline ::std::string* TraceLog::mutable_log_time() {
  
  // @@protoc_insertion_point(field_mutable:neb.TraceLog.log_time)
  return log_time_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TraceLog::release_log_time() {
  // @@protoc_insertion_point(field_release:neb.TraceLog.log_time)
  
  return log_time_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TraceLog::set_allocated_log_time(::std::string* log_time) {
  if (log_time != NULL) {
    
  } else {
    
  }
  log_time_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), log_time);
  // @@protoc_insertion_point(field_set_allocated:neb.TraceLog.log_time)
}

// optional string node_type = 2;
inline void TraceLog::clear_node_type() {
  node_type_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& TraceLog::node_type() const {
  // @@protoc_insertion_point(field_get:neb.TraceLog.node_type)
  return node_type_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TraceLog::set_node_type(const ::std::string& value) {
  
  node_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:neb.TraceLog.node_type)
}
inline void TraceLog::set_node_type(const char* value) {
  
  node_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:neb.TraceLog.node_type)
}
inline void TraceLog::set_node_type(const char* value, size_t size) {
  
  node_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:neb.TraceLog.node_type)
}
inline ::std::string* TraceLog::mutable_node_type() {
  
  // @@protoc_insertion_point(field_mutable:neb.TraceLog.node_type)
  return node_type_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TraceLog::release_node_type() {
  // @@protoc_insertion_point(field_release:neb.TraceLog.node_type)
  
  return node_type_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TraceLog::set_allocated_node_type(::std::string* node_type) {
  if (node_type != NULL) {
    
  } else {
    
  }
  node_type_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), node_type);
  // @@protoc_insertion_point(field_set_allocated:neb.TraceLog.node_type)
}

// optional string node_identify = 3;
inline void TraceLog::clear_node_identify() {
  node_identify_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& TraceLog::node_identify() const {
  // @@protoc_insertion_point(field_get:neb.TraceLog.node_identify)
  return node_identify_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TraceLog::set_node_identify(const ::std::string& value) {
  
  node_identify_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:neb.TraceLog.node_identify)
}
inline void TraceLog::set_node_identify(const char* value) {
  
  node_identify_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:neb.TraceLog.node_identify)
}
inline void TraceLog::set_node_identify(const char* value, size_t size) {
  
  node_identify_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:neb.TraceLog.node_identify)
}
inline ::std::string* TraceLog::mutable_node_identify() {
  
  // @@protoc_insertion_point(field_mutable:neb.TraceLog.node_identify)
  return node_identify_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TraceLog::release_node_identify() {
  // @@protoc_insertion_point(field_release:neb.TraceLog.node_identify)
  
  return node_identify_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TraceLog::set_allocated_node_identify(::std::string* node_identify) {
  if (node_identify != NULL) {
    
  } else {
    
  }
  node_identify_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), node_identify);
  // @@protoc_insertion_point(field_set_allocated:neb.TraceLog.node_identify)
}

// optional string log_level = 4;
inline void TraceLog::clear_log_level() {
  log_level_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& TraceLog::log_level() const {
  // @@protoc_insertion_point(field_get:neb.TraceLog.log_level)
  return log_level_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TraceLog::set_log_level(const ::std::string& value) {
  
  log_level_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:neb.TraceLog.log_level)
}
inline void TraceLog::set_log_level(const char* value) {
  
  log_level_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:neb.TraceLog.log_level)
}
inline void TraceLog::set_log_level(const char* value, size_t size) {
  
  log_level_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:neb.TraceLog.log_level)
}
inline ::std::string* TraceLog::mutable_log_level() {
  
  // @@protoc_insertion_point(field_mutable:neb.TraceLog.log_level)
  return log_level_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TraceLog::release_log_level() {
  // @@protoc_insertion_point(field_release:neb.TraceLog.log_level)
  
  return log_level_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TraceLog::set_allocated_log_level(::std::string* log_level) {
  if (log_level != NULL) {
    
  } else {
    
  }
  log_level_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), log_level);
  // @@protoc_insertion_point(field_set_allocated:neb.TraceLog.log_level)
}

// optional string code_file_name = 5;
inline void TraceLog::clear_code_file_name() {
  code_file_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& TraceLog::code_file_name() const {
  // @@protoc_insertion_point(field_get:neb.TraceLog.code_file_name)
  return code_file_name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TraceLog::set_code_file_name(const ::std::string& value) {
  
  code_file_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:neb.TraceLog.code_file_name)
}
inline void TraceLog::set_code_file_name(const char* value) {
  
  code_file_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:neb.TraceLog.code_file_name)
}
inline void TraceLog::set_code_file_name(const char* value, size_t size) {
  
  code_file_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:neb.TraceLog.code_file_name)
}
inline ::std::string* TraceLog::mutable_code_file_name() {
  
  // @@protoc_insertion_point(field_mutable:neb.TraceLog.code_file_name)
  return code_file_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TraceLog::release_code_file_name() {
  // @@protoc_insertion_point(field_release:neb.TraceLog.code_file_name)
  
  return code_file_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TraceLog::set_allocated_code_file_name(::std::string* code_file_name) {
  if (code_file_name != NULL) {
    
  } else {
    
  }
  code_file_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), code_file_name);
  // @@protoc_insertion_point(field_set_allocated:neb.TraceLog.code_file_name)
}

// optional uint32 code_file_line = 6;
inline void TraceLog::clear_code_file_line() {
  code_file_line_ = 0u;
}
inline ::google::protobuf::uint32 TraceLog::code_file_line() const {
  // @@protoc_insertion_point(field_get:neb.TraceLog.code_file_line)
  return code_file_line_;
}
inline void TraceLog::set_code_file_line(::google::protobuf::uint32 value) {
  
  code_file_line_ = value;
  // @@protoc_insertion_point(field_set:neb.TraceLog.code_file_line)
}

// optional string code_function = 7;
inline void TraceLog::clear_code_function() {
  code_function_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& TraceLog::code_function() const {
  // @@protoc_insertion_point(field_get:neb.TraceLog.code_function)
  return code_function_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TraceLog::set_code_function(const ::std::string& value) {
  
  code_function_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:neb.TraceLog.code_function)
}
inline void TraceLog::set_code_function(const char* value) {
  
  code_function_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:neb.TraceLog.code_function)
}
inline void TraceLog::set_code_function(const char* value, size_t size) {
  
  code_function_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:neb.TraceLog.code_function)
}
inline ::std::string* TraceLog::mutable_code_function() {
  
  // @@protoc_insertion_point(field_mutable:neb.TraceLog.code_function)
  return code_function_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TraceLog::release_code_function() {
  // @@protoc_insertion_point(field_release:neb.TraceLog.code_function)
  
  return code_function_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TraceLog::set_allocated_code_function(::std::string* code_function) {
  if (code_function != NULL) {
    
  } else {
    
  }
  code_function_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), code_function);
  // @@protoc_insertion_point(field_set_allocated:neb.TraceLog.code_function)
}

// optional bytes log_content = 8;
inline void TraceLog::clear_log_content() {
  log_content_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& TraceLog::log_content() const {
  // @@protoc_insertion_point(field_get:neb.TraceLog.log_content)
  return log_content_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TraceLog::set_log_content(const ::std::string& value) {
  
  log_content_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:neb.TraceLog.log_content)
}
inline void TraceLog::set_log_content(const char* value) {
  
  log_content_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:neb.TraceLog.log_content)
}
inline void TraceLog::set_log_content(const void* value, size_t size) {
  
  log_content_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:neb.TraceLog.log_content)
}
inline ::std::string* TraceLog::mutable_log_content() {
  
  // @@protoc_insertion_point(field_mutable:neb.TraceLog.log_content)
  return log_content_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TraceLog::release_log_content() {
  // @@protoc_insertion_point(field_release:neb.TraceLog.log_content)
  
  return log_content_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TraceLog::set_allocated_log_content(::std::string* log_content) {
  if (log_content != NULL) {
    
  } else {
    
  }
  log_content_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), log_content);
  // @@protoc_insertion_point(field_set_allocated:neb.TraceLog.log_content)
}

// -------------------------------------------------------------------

// SpecChannelInfo

// optional uint32 codec_type = 1;
inline void SpecChannelInfo::clear_codec_type() {
  codec_type_ = 0u;
}
inline ::google::protobuf::uint32 SpecChannelInfo::codec_type() const {
  // @@protoc_insertion_point(field_get:neb.SpecChannelInfo.codec_type)
  return codec_type_;
}
inline void SpecChannelInfo::set_codec_type(::google::protobuf::uint32 value) {
  
  codec_type_ = value;
  // @@protoc_insertion_point(field_set:neb.SpecChannelInfo.codec_type)
}

// optional uint32 from_labor = 2;
inline void SpecChannelInfo::clear_from_labor() {
  from_labor_ = 0u;
}
inline ::google::protobuf::uint32 SpecChannelInfo::from_labor() const {
  // @@protoc_insertion_point(field_get:neb.SpecChannelInfo.from_labor)
  return from_labor_;
}
inline void SpecChannelInfo::set_from_labor(::google::protobuf::uint32 value) {
  
  from_labor_ = value;
  // @@protoc_insertion_point(field_set:neb.SpecChannelInfo.from_labor)
}

// optional uint32 to_labor = 3;
inline void SpecChannelInfo::clear_to_labor() {
  to_labor_ = 0u;
}
inline ::google::protobuf::uint32 SpecChannelInfo::to_labor() const {
  // @@protoc_insertion_point(field_get:neb.SpecChannelInfo.to_labor)
  return to_labor_;
}
inline void SpecChannelInfo::set_to_labor(::google::protobuf::uint32 value) {
  
  to_labor_ = value;
  // @@protoc_insertion_point(field_set:neb.SpecChannelInfo.to_labor)
}

// -------------------------------------------------------------------

// FdTransfer

// optional int32 fd = 1;
inline void FdTransfer::clear_fd() {
  fd_ = 0;
}
inline ::google::protobuf::int32 FdTransfer::fd() const {
  // @@protoc_insertion_point(field_get:neb.FdTransfer.fd)
  return fd_;
}
inline void FdTransfer::set_fd(::google::protobuf::int32 value) {
  
  fd_ = value;
  // @@protoc_insertion_point(field_set:neb.FdTransfer.fd)
}

// optional int32 addr_family = 2;
inline void FdTransfer::clear_addr_family() {
  addr_family_ = 0;
}
inline ::google::protobuf::int32 FdTransfer::addr_family() const {
  // @@protoc_insertion_point(field_get:neb.FdTransfer.addr_family)
  return addr_family_;
}
inline void FdTransfer::set_addr_family(::google::protobuf::int32 value) {
  
  addr_family_ = value;
  // @@protoc_insertion_point(field_set:neb.FdTransfer.addr_family)
}

// optional string client_addr = 3;
inline void FdTransfer::clear_client_addr() {
  client_addr_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& FdTransfer::client_addr() const {
  // @@protoc_insertion_point(field_get:neb.FdTransfer.client_addr)
  return client_addr_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void FdTransfer::set_client_addr(const ::std::string& value) {
  
  client_addr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:neb.FdTransfer.client_addr)
}
inline void FdTransfer::set_client_addr(const char* value) {
  
  client_addr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:neb.FdTransfer.client_addr)
}
inline void FdTransfer::set_client_addr(const char* value, size_t size) {
  
  client_addr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:neb.FdTransfer.client_addr)
}
inline ::std::string* FdTransfer::mutable_client_addr() {
  
  // @@protoc_insertion_point(field_mutable:neb.FdTransfer.client_addr)
  return client_addr_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* FdTransfer::release_client_addr() {
  // @@protoc_insertion_point(field_release:neb.FdTransfer.client_addr)
  
  return client_addr_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void FdTransfer::set_allocated_client_addr(::std::string* client_addr) {
  if (client_addr != NULL) {
    
  } else {
    
  }
  client_addr_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), client_addr);
  // @@protoc_insertion_point(field_set_allocated:neb.FdTransfer.client_addr)
}

// optional int32 client_port = 4;
inline void FdTransfer::clear_client_port() {
  client_port_ = 0;
}
inline ::google::protobuf::int32 FdTransfer::client_port() const {
  // @@protoc_insertion_point(field_get:neb.FdTransfer.client_port)
  return client_port_;
}
inline void FdTransfer::set_client_port(::google::protobuf::int32 value) {
  
  client_port_ = value;
  // @@protoc_insertion_point(field_set:neb.FdTransfer.client_port)
}

// optional int32 codec_type = 5;
inline void FdTransfer::clear_codec_type() {
  codec_type_ = 0;
}
inline ::google::protobuf::int32 FdTransfer::codec_type() const {
  // @@protoc_insertion_point(field_get:neb.FdTransfer.codec_type)
  return codec_type_;
}
inline void FdTransfer::set_codec_type(::google::protobuf::int32 value) {
  
  codec_type_ = value;
  // @@protoc_insertion_point(field_set:neb.FdTransfer.codec_type)
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace neb

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_neb_5fsys_2eproto__INCLUDED
