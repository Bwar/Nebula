syntax = "proto3";

message HttpMsg
{
    message Header
    {
        string name                 = 1;
        string value                = 2;
    }
	message Upgrade
	{
	    bool is_upgrade             = 1;
	    string protocol             = 2;
	}

	int32 type						= 1;		///< http_parser_type 请求或响应
	int32 http_major				= 2;		///< http大版本号
	int32 http_minor				= 3;		///< http小版本号
	int32 content_length			= 4;		///< 内容长度
	int32 method					= 5;		///< 请求方法
	int32 status_code				= 6;		///< 响应状态码
	int32 encoding					= 7;		///< 传输编码（只在encode时使用，当 Transfer-Encoding: chunked 时，用于标识chunk序号，0表示第一个chunk，依次递增）
	string url						= 8;		///< 地址
    map<string, string> headers     = 9;		///< http头域
	bytes body						= 10;		///< 消息体（当 Transfer-Encoding: chunked 时，只存储一个chunk）
	map<string, string> params      = 11;		///< GET方法参数，POST方法表单提交的参数
	Upgrade upgrade                 = 12;       ///< 升级协议
	float keep_alive				= 13;		///< keep alive time
	string path				        = 14;		///< Http Decode时从url中解析出来，不需要人为填充（encode时不需要填）

    bool chunk_notice               = 19;       ///< 是否启用分块传输通知（当包体比较大时，部分传输完毕也会通知业务层而无需等待整个http包传输并解码完毕。）

    // http2 only
    uint32 stream_id                = 20;       ///< 流ID，请求发送时为0则自动分配新的流ID，响应或push时为0则视为错误
    repeated Header pseudo_header                  = 21;   ///< 伪头部
    repeated Header trailer_header                 = 22;   ///< 跟踪消息，如grpc的Trailers
    string hpack_data                              = 23;       ///< 压缩后的头部数据（解码过程中使用）
    repeated string adding_without_index_headers   = 24;   ///< 添加不需要新增到动态表的http头
    repeated string deleting_without_index_headers = 25;   ///< 删除不需要新增到动态表的http头
    repeated string adding_never_index_headers     = 26;   ///< 添加永不新增到动态表的http头
    repeated string deleting_never_index_headers   = 27;   ///< 删除永不新增到动态表的http头
    uint32 dynamic_table_update_size               = 28;   ///< 更改动态表size
    bool with_huffman                              = 29;   ///< 是否使用huffman编码
    string headers_frame_padding                   = 30;   ///< 头部帧填充字节
    string data_frame_padding                      = 31;   ///< 数据帧填充字节
    string push_promise_frame_padding              = 32;   ///< PUSH_PROMISE帧填充字节
    map<uint32, uint32> settings                   = 33;   ///< SETTINGS类型和参数值
}
